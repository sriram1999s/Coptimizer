
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AND_ASSIGN ASSIGN BIT_AND BIT_OR BIT_XOR COMMA DIVIDE DIV_ASSIGN ELSE EQ FLOAT_NUM FOR GE GT ID IF INT_NUM LE LT L_FLOWBRACE L_PAREN L_SHIFT L_SHIFT_ASSIGN MINUS MINUS_ASSIGN MINUS_MINUS MOD MOD_ASSIGN MULTIPLY MUL_ASSIGN NE NOT OR OR_ASSIGN PLUS PLUS_ASSIGN PLUS_PLUS RETURN R_FLOWBRACE R_PAREN R_SHIFT R_SHIFT_ASSIGN SEMICOLON TYPE WHILE XOR_ASSIGN\n    start : multiple_statements\n    \n    multiple_statements : multiple_statements statement\n                        | statement\n    \n    statement : open\n              | closed\n    \n    open : IF condition statement\n         | IF condition closed ELSE open\n         | WHILE condition open\n         | FOR for_condition open\n    \n    closed : simple\n           | block\n           | IF condition closed ELSE closed\n           | WHILE condition closed\n           | FOR for_condition closed\n    \n    condition : L_PAREN expr R_PAREN\n    \n    for_condition : L_PAREN declaration expr SEMICOLON expr R_PAREN\n                | L_PAREN expr SEMICOLON expr SEMICOLON expr R_PAREN\n    \n    multi_declaration : multi_declaration ID COMMA\n    \t\t      | multi_declaration ID ASSIGN expr COMMA\n\t\t      | ID COMMA\n    \t\t      | ID ASSIGN expr COMMA\n    \n     stop : ID SEMICOLON\n\t      | ID ASSIGN expr SEMICOLON\n     \n    declaration : TYPE ID SEMICOLON\n                | TYPE ID ASSIGN expr SEMICOLON\n                | TYPE ID ASSIGN function_call\n\t\t        | TYPE multi_declaration stop\n    \n    block : L_FLOWBRACE multiple_statements R_FLOWBRACE\n    \n    simple : expr SEMICOLON\n           | declaration\n           | SEMICOLON\n\t       | function\n\t       | function_call\n\t       | RETURN ID SEMICOLON\n\t       | RETURN INT_NUM SEMICOLON\n    empty :\n    function_call : ID L_PAREN call_params R_PAREN SEMICOLON\n    \n    \tcall_params : empty\n\t\t            | yes_call_params end_call_params\n\t\t            | end_call_params\n    \n    yes_call_params : yes_call_params INT_NUM COMMA\n    \t\t    | yes_call_params ID COMMA\n\t\t    | INT_NUM COMMA\n\t\t    | ID COMMA\n    \n    end_call_params : INT_NUM\n\t\t    | ID\n    \n    yes_dec_params : yes_dec_params TYPE ID COMMA\n                    | TYPE ID COMMA\n    \n    end_dec_params : TYPE ID\n    \n    dec_params : empty\n\t       | yes_dec_params end_dec_params\n\t       | end_dec_params\n    \n    function : TYPE ID L_PAREN dec_params R_PAREN function_2\n    \n    function_2 : SEMICOLON\n    \t       | block\n    \n    expr : expr assignment exprOR\n         | expr assignment ID L_PAREN call_params R_PAREN\n         | exprOR\n    \n    assignment : ASSIGN\n               | PLUS_ASSIGN\n               | MINUS_ASSIGN\n               | MUL_ASSIGN\n               | DIV_ASSIGN\n               | AND_ASSIGN\n               | OR_ASSIGN\n               | XOR_ASSIGN\n               | MOD_ASSIGN\n               | L_SHIFT_ASSIGN\n               | R_SHIFT_ASSIGN\n    \n    exprOR : exprOR OR exprAND\n           | exprAND\n    \n    exprAND : exprAND AND exprBITOR\n            | exprBITOR\n    \n    exprBITOR : exprBITOR BIT_OR exprBITXOR\n              | exprBITXOR\n    \n    exprBITXOR : exprBITXOR BIT_XOR exprBITAND\n               | exprBITAND\n    \n    exprBITAND : exprBITAND BIT_AND exprEQ\n               | exprEQ\n    \n    exprEQ : exprEQ EQ exprRELOP\n           | exprEQ NE exprRELOP\n           | exprRELOP\n    \n    exprRELOP : exprRELOP relop exprSHIFT\n              | exprSHIFT\n    \n    relop : LE\n          | LT\n          | GE\n          | GT\n    \n    exprSHIFT : exprSHIFT L_SHIFT exprOP\n              | exprSHIFT R_SHIFT exprOP\n              | exprOP\n    \n    exprOP : exprOP PLUS term\n         | exprOP MINUS term\n         | term\n    \n    term : term MULTIPLY factor\n         | term DIVIDE factor\n         | term MOD factor\n         | factor\n    \n    factor : NOT factor\n           | PLUS factor\n           | MINUS factor\n           | PLUS_PLUS factor\n           | MINUS_MINUS factor\n           | brace\n    \n    brace  : L_PAREN expr R_PAREN\n           | brace PLUS_PLUS\n           | brace MINUS_MINUS\n           | INT_NUM\n           | FLOAT_NUM\n           | ID\n    '
    
_lr_action_items = {'IF':([0,2,3,4,5,9,10,12,13,14,15,19,40,41,43,44,46,62,94,95,99,100,101,102,108,109,116,119,123,139,140,141,142,143,155,163,164,165,166,170,173,180,185,186,187,190,191,194,],[6,6,-3,-4,-5,-10,-11,-31,-30,-32,-33,6,-2,93,6,6,-29,6,-6,-5,-8,-13,-9,-14,-34,-35,-28,-24,-27,93,6,93,93,-15,-26,-22,-5,-12,-7,-37,-25,93,-53,-54,-55,-23,-16,-17,]),'WHILE':([0,2,3,4,5,9,10,12,13,14,15,19,40,41,43,44,46,62,94,95,99,100,101,102,108,109,116,119,123,139,140,141,142,143,155,163,164,165,166,170,173,180,185,186,187,190,191,194,],[7,7,-3,-4,-5,-10,-11,-31,-30,-32,-33,7,-2,96,7,7,-29,7,-6,-5,-8,-13,-9,-14,-34,-35,-28,-24,-27,96,7,96,96,-15,-26,-22,-5,-12,-7,-37,-25,96,-53,-54,-55,-23,-16,-17,]),'FOR':([0,2,3,4,5,9,10,12,13,14,15,19,40,41,43,44,46,62,94,95,99,100,101,102,108,109,116,119,123,139,140,141,142,143,155,163,164,165,166,170,173,180,185,186,187,190,191,194,],[8,8,-3,-4,-5,-10,-11,-31,-30,-32,-33,8,-2,97,8,8,-29,8,-6,-5,-8,-13,-9,-14,-34,-35,-28,-24,-27,97,8,97,97,-15,-26,-22,-5,-12,-7,-37,-25,97,-53,-54,-55,-23,-16,-17,]),'SEMICOLON':([0,2,3,4,5,9,10,11,12,13,14,15,17,18,19,20,23,24,25,26,27,28,29,30,32,34,38,39,40,41,43,44,46,59,60,62,65,66,83,87,88,89,90,91,92,94,95,99,100,101,102,104,106,107,108,109,116,117,118,119,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,146,149,154,155,163,164,165,166,168,170,173,176,179,180,183,185,186,187,190,191,194,],[12,12,-3,-4,-5,-10,-11,46,-31,-30,-32,-33,-110,-108,12,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,-2,12,12,12,-29,108,109,12,-110,119,-100,-101,-99,-102,-103,-106,-107,-6,-5,-8,-13,-9,-14,145,-56,-110,-34,-35,-28,-70,-105,-24,-27,163,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,12,12,12,12,-15,167,119,170,173,-26,-22,-5,-12,-7,182,-37,-25,186,190,12,-57,-53,-54,-55,-23,-16,-17,]),'RETURN':([0,2,3,4,5,9,10,12,13,14,15,19,40,41,43,44,46,62,94,95,99,100,101,102,108,109,116,119,123,139,140,141,142,143,155,163,164,165,166,170,173,180,185,186,187,190,191,194,],[16,16,-3,-4,-5,-10,-11,-31,-30,-32,-33,16,-2,16,16,16,-29,16,-6,-5,-8,-13,-9,-14,-34,-35,-28,-24,-27,16,16,16,16,-15,-26,-22,-5,-12,-7,-37,-25,16,-53,-54,-55,-23,-16,-17,]),'L_FLOWBRACE':([0,2,3,4,5,9,10,12,13,14,15,19,40,41,43,44,46,62,94,95,99,100,101,102,108,109,116,119,123,139,140,141,142,143,155,163,164,165,166,170,173,176,180,185,186,187,190,191,194,],[19,19,-3,-4,-5,-10,-11,-31,-30,-32,-33,19,-2,19,19,19,-29,19,-6,-5,-8,-13,-9,-14,-34,-35,-28,-24,-27,19,19,19,19,-15,-26,-22,-5,-12,-7,-37,-25,19,19,-53,-54,-55,-23,-16,-17,]),'TYPE':([0,2,3,4,5,9,10,12,13,14,15,19,40,41,43,44,45,46,62,94,95,99,100,101,102,108,109,116,119,121,123,139,140,141,142,143,155,159,163,164,165,166,170,173,180,184,185,186,187,190,191,193,194,],[22,22,-3,-4,-5,-10,-11,-31,-30,-32,-33,22,-2,22,22,22,105,-29,22,-6,-5,-8,-13,-9,-14,-34,-35,-28,-24,156,-27,22,22,22,22,-15,-26,178,-22,-5,-12,-7,-37,-25,22,-48,-53,-54,-55,-23,-16,-47,-17,]),'ID':([0,2,3,4,5,9,10,12,13,14,15,16,19,21,22,31,33,35,36,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,95,99,100,101,102,103,105,108,109,113,116,119,120,122,123,139,140,141,142,143,145,147,148,153,155,156,161,162,163,164,165,166,167,170,171,172,173,174,178,180,182,185,186,187,189,190,191,194,],[17,17,-3,-4,-5,-10,-11,-31,-30,-32,-33,59,17,65,66,65,65,65,65,65,-2,17,65,17,17,65,-29,107,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,110,17,65,124,65,65,65,65,65,65,65,-85,-86,-87,-88,65,65,65,65,65,65,65,-6,-5,-8,-13,-9,-14,65,146,-34,-35,152,-28,-24,17,-20,-27,17,17,17,17,-15,65,110,-44,-43,-26,175,-18,65,-22,-5,-12,-7,65,-37,-41,-42,-25,-21,188,17,65,-53,-54,-55,-19,-23,-16,-17,]),'NOT':([0,2,3,4,5,9,10,12,13,14,15,19,21,31,33,35,36,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,95,99,100,101,102,103,108,109,116,119,120,123,139,140,141,142,143,145,155,162,163,164,165,166,167,170,173,180,182,185,186,187,190,191,194,],[35,35,-3,-4,-5,-10,-11,-31,-30,-32,-33,35,35,35,35,35,35,35,-2,35,35,35,35,35,-29,35,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,35,35,35,35,35,35,35,35,35,-85,-86,-87,-88,35,35,35,35,35,35,35,-6,-5,-8,-13,-9,-14,35,-34,-35,-28,-24,35,-27,35,35,35,35,-15,35,-26,35,-22,-5,-12,-7,35,-37,-25,35,35,-53,-54,-55,-23,-16,-17,]),'PLUS':([0,2,3,4,5,9,10,12,13,14,15,17,18,19,21,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,99,100,101,102,103,107,108,109,116,118,119,120,123,132,133,134,135,136,137,138,139,140,141,142,143,145,155,162,163,164,165,166,167,170,173,180,182,185,186,187,190,191,194,],[31,31,-3,-4,-5,-10,-11,-31,-30,-32,-33,-110,-108,31,31,81,31,-94,31,-98,31,31,31,-104,-109,-2,31,31,31,31,31,-29,31,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,31,31,-110,31,31,31,31,31,31,31,-85,-86,-87,-88,31,31,31,31,-100,31,31,31,-101,-99,-102,-103,-106,-107,-6,-5,-8,-13,-9,-14,31,-110,-34,-35,-28,-105,-24,31,-27,81,81,-92,-93,-95,-96,-97,31,31,31,31,-15,31,-26,31,-22,-5,-12,-7,31,-37,-25,31,31,-53,-54,-55,-23,-16,-17,]),'MINUS':([0,2,3,4,5,9,10,12,13,14,15,17,18,19,21,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,99,100,101,102,103,107,108,109,116,118,119,120,123,132,133,134,135,136,137,138,139,140,141,142,143,145,155,162,163,164,165,166,167,170,173,180,182,185,186,187,190,191,194,],[33,33,-3,-4,-5,-10,-11,-31,-30,-32,-33,-110,-108,33,33,82,33,-94,33,-98,33,33,33,-104,-109,-2,33,33,33,33,33,-29,33,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,33,33,-110,33,33,33,33,33,33,33,-85,-86,-87,-88,33,33,33,33,-100,33,33,33,-101,-99,-102,-103,-106,-107,-6,-5,-8,-13,-9,-14,33,-110,-34,-35,-28,-105,-24,33,-27,82,82,-92,-93,-95,-96,-97,33,33,33,33,-15,33,-26,33,-22,-5,-12,-7,33,-37,-25,33,33,-53,-54,-55,-23,-16,-17,]),'PLUS_PLUS':([0,2,3,4,5,9,10,12,13,14,15,17,18,19,21,31,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,91,92,94,95,99,100,101,102,103,107,108,109,116,118,119,120,123,139,140,141,142,143,145,155,162,163,164,165,166,167,170,173,180,182,185,186,187,190,191,194,],[36,36,-3,-4,-5,-10,-11,-31,-30,-32,-33,-110,-108,36,36,36,36,36,36,36,91,-109,-2,36,36,36,36,36,-29,36,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,36,36,-110,36,36,36,36,36,36,36,-85,-86,-87,-88,36,36,36,36,36,36,36,-106,-107,-6,-5,-8,-13,-9,-14,36,-110,-34,-35,-28,-105,-24,36,-27,36,36,36,36,-15,36,-26,36,-22,-5,-12,-7,36,-37,-25,36,36,-53,-54,-55,-23,-16,-17,]),'MINUS_MINUS':([0,2,3,4,5,9,10,12,13,14,15,17,18,19,21,31,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,91,92,94,95,99,100,101,102,103,107,108,109,116,118,119,120,123,139,140,141,142,143,145,155,162,163,164,165,166,167,170,173,180,182,185,186,187,190,191,194,],[37,37,-3,-4,-5,-10,-11,-31,-30,-32,-33,-110,-108,37,37,37,37,37,37,37,92,-109,-2,37,37,37,37,37,-29,37,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,37,37,-110,37,37,37,37,37,37,37,-85,-86,-87,-88,37,37,37,37,37,37,37,-106,-107,-6,-5,-8,-13,-9,-14,37,-110,-34,-35,-28,-105,-24,37,-27,37,37,37,37,-15,37,-26,37,-22,-5,-12,-7,37,-37,-25,37,37,-53,-54,-55,-23,-16,-17,]),'L_PAREN':([0,2,3,4,5,6,7,8,9,10,12,13,14,15,17,19,21,31,33,35,36,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,93,94,95,96,97,99,100,101,102,103,107,108,109,116,119,120,123,139,140,141,142,143,145,155,162,163,164,165,166,167,170,173,180,182,185,186,187,190,191,194,],[21,21,-3,-4,-5,42,42,45,-10,-11,-31,-30,-32,-33,61,21,21,21,21,21,21,21,-2,21,21,21,21,21,-29,21,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,21,21,121,21,21,21,21,21,21,21,-85,-86,-87,-88,21,21,21,21,21,21,21,42,-6,-5,42,45,-8,-13,-9,-14,21,147,-34,-35,-28,-24,21,-27,21,21,21,21,-15,21,-26,21,-22,-5,-12,-7,21,-37,-25,21,21,-53,-54,-55,-23,-16,-17,]),'INT_NUM':([0,2,3,4,5,9,10,12,13,14,15,16,19,21,31,33,35,36,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,95,99,100,101,102,103,108,109,113,116,119,120,123,139,140,141,142,143,145,147,148,153,155,162,163,164,165,166,167,170,171,172,173,180,182,185,186,187,190,191,194,],[18,18,-3,-4,-5,-10,-11,-31,-30,-32,-33,60,18,18,18,18,18,18,18,-2,18,18,18,18,18,-29,18,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,115,18,18,18,18,18,18,18,18,18,-85,-86,-87,-88,18,18,18,18,18,18,18,-6,-5,-8,-13,-9,-14,18,-34,-35,151,-28,-24,18,-27,18,18,18,18,-15,18,115,-44,-43,-26,18,-22,-5,-12,-7,18,-37,-41,-42,-25,18,18,-53,-54,-55,-23,-16,-17,]),'FLOAT_NUM':([0,2,3,4,5,9,10,12,13,14,15,19,21,31,33,35,36,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,94,95,99,100,101,102,103,108,109,116,119,120,123,139,140,141,142,143,145,155,162,163,164,165,166,167,170,173,180,182,185,186,187,190,191,194,],[39,39,-3,-4,-5,-10,-11,-31,-30,-32,-33,39,39,39,39,39,39,39,-2,39,39,39,39,39,-29,39,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,39,39,39,39,39,39,39,39,39,-85,-86,-87,-88,39,39,39,39,39,39,39,-6,-5,-8,-13,-9,-14,39,-34,-35,-28,-24,39,-27,39,39,39,39,-15,39,-26,39,-22,-5,-12,-7,39,-37,-25,39,39,-53,-54,-55,-23,-16,-17,]),'$end':([1,2,3,4,5,9,10,12,13,14,15,40,46,94,95,99,100,101,102,108,109,116,119,123,155,163,164,165,166,170,173,185,186,187,190,],[0,-1,-3,-4,-5,-10,-11,-31,-30,-32,-33,-2,-29,-6,-5,-8,-13,-9,-14,-34,-35,-28,-24,-27,-26,-22,-5,-12,-7,-37,-25,-53,-54,-55,-23,]),'R_FLOWBRACE':([3,4,5,9,10,12,13,14,15,40,46,62,94,95,99,100,101,102,108,109,116,119,123,155,163,164,165,166,170,173,185,186,187,190,],[-3,-4,-5,-10,-11,-31,-30,-32,-33,-2,-29,116,-6,-5,-8,-13,-9,-14,-34,-35,-28,-24,-27,-26,-22,-5,-12,-7,-37,-25,-53,-54,-55,-23,]),'ELSE':([9,10,12,13,14,15,46,95,100,102,108,109,116,119,123,155,163,164,165,170,173,185,186,187,190,],[-10,-11,-31,-30,-32,-33,-29,140,-13,-14,-34,-35,-28,-24,-27,-26,-22,180,-12,-37,-25,-53,-54,-55,-23,]),'ASSIGN':([11,17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,64,65,66,83,87,88,89,90,91,92,98,104,106,107,117,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,146,154,168,179,181,183,192,],[48,-110,-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,48,-110,120,-100,-101,-99,-102,-103,-106,-107,48,48,-56,-110,-70,-105,162,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,48,120,48,48,48,48,-57,48,]),'PLUS_ASSIGN':([11,17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,64,65,83,87,88,89,90,91,92,98,104,106,107,117,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,154,168,179,181,183,192,],[49,-110,-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,49,-110,-100,-101,-99,-102,-103,-106,-107,49,49,-56,-110,-70,-105,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,49,49,49,49,49,-57,49,]),'MINUS_ASSIGN':([11,17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,64,65,83,87,88,89,90,91,92,98,104,106,107,117,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,154,168,179,181,183,192,],[50,-110,-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,50,-110,-100,-101,-99,-102,-103,-106,-107,50,50,-56,-110,-70,-105,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,50,50,50,50,50,-57,50,]),'MUL_ASSIGN':([11,17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,64,65,83,87,88,89,90,91,92,98,104,106,107,117,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,154,168,179,181,183,192,],[51,-110,-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,51,-110,-100,-101,-99,-102,-103,-106,-107,51,51,-56,-110,-70,-105,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,51,51,51,51,51,-57,51,]),'DIV_ASSIGN':([11,17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,64,65,83,87,88,89,90,91,92,98,104,106,107,117,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,154,168,179,181,183,192,],[52,-110,-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,52,-110,-100,-101,-99,-102,-103,-106,-107,52,52,-56,-110,-70,-105,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,52,52,52,52,52,-57,52,]),'AND_ASSIGN':([11,17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,64,65,83,87,88,89,90,91,92,98,104,106,107,117,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,154,168,179,181,183,192,],[53,-110,-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,53,-110,-100,-101,-99,-102,-103,-106,-107,53,53,-56,-110,-70,-105,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,53,53,53,53,53,-57,53,]),'OR_ASSIGN':([11,17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,64,65,83,87,88,89,90,91,92,98,104,106,107,117,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,154,168,179,181,183,192,],[54,-110,-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,54,-110,-100,-101,-99,-102,-103,-106,-107,54,54,-56,-110,-70,-105,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,54,54,54,54,54,-57,54,]),'XOR_ASSIGN':([11,17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,64,65,83,87,88,89,90,91,92,98,104,106,107,117,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,154,168,179,181,183,192,],[55,-110,-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,55,-110,-100,-101,-99,-102,-103,-106,-107,55,55,-56,-110,-70,-105,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,55,55,55,55,55,-57,55,]),'MOD_ASSIGN':([11,17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,64,65,83,87,88,89,90,91,92,98,104,106,107,117,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,154,168,179,181,183,192,],[56,-110,-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,56,-110,-100,-101,-99,-102,-103,-106,-107,56,56,-56,-110,-70,-105,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,56,56,56,56,56,-57,56,]),'L_SHIFT_ASSIGN':([11,17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,64,65,83,87,88,89,90,91,92,98,104,106,107,117,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,154,168,179,181,183,192,],[57,-110,-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,57,-110,-100,-101,-99,-102,-103,-106,-107,57,57,-56,-110,-70,-105,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,57,57,57,57,57,-57,57,]),'R_SHIFT_ASSIGN':([11,17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,64,65,83,87,88,89,90,91,92,98,104,106,107,117,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,154,168,179,181,183,192,],[58,-110,-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,58,-110,-100,-101,-99,-102,-103,-106,-107,58,58,-56,-110,-70,-105,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,58,58,58,58,58,-57,58,]),'MULTIPLY':([17,18,32,34,38,39,65,83,87,88,89,90,91,92,107,118,134,135,136,137,138,],[-110,-108,84,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,84,84,-95,-96,-97,]),'DIVIDE':([17,18,32,34,38,39,65,83,87,88,89,90,91,92,107,118,134,135,136,137,138,],[-110,-108,85,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,85,85,-95,-96,-97,]),'MOD':([17,18,32,34,38,39,65,83,87,88,89,90,91,92,107,118,134,135,136,137,138,],[-110,-108,86,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,86,86,-95,-96,-97,]),'L_SHIFT':([17,18,29,30,32,34,38,39,65,83,87,88,89,90,91,92,107,118,131,132,133,134,135,136,137,138,],[-110,-108,79,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,79,-89,-90,-92,-93,-95,-96,-97,]),'R_SHIFT':([17,18,29,30,32,34,38,39,65,83,87,88,89,90,91,92,107,118,131,132,133,134,135,136,137,138,],[-110,-108,80,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,80,-89,-90,-92,-93,-95,-96,-97,]),'LE':([17,18,28,29,30,32,34,38,39,65,83,87,88,89,90,91,92,107,118,129,130,131,132,133,134,135,136,137,138,],[-110,-108,75,-84,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,75,75,-83,-89,-90,-92,-93,-95,-96,-97,]),'LT':([17,18,28,29,30,32,34,38,39,65,83,87,88,89,90,91,92,107,118,129,130,131,132,133,134,135,136,137,138,],[-110,-108,76,-84,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,76,76,-83,-89,-90,-92,-93,-95,-96,-97,]),'GE':([17,18,28,29,30,32,34,38,39,65,83,87,88,89,90,91,92,107,118,129,130,131,132,133,134,135,136,137,138,],[-110,-108,77,-84,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,77,77,-83,-89,-90,-92,-93,-95,-96,-97,]),'GT':([17,18,28,29,30,32,34,38,39,65,83,87,88,89,90,91,92,107,118,129,130,131,132,133,134,135,136,137,138,],[-110,-108,78,-84,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,78,78,-83,-89,-90,-92,-93,-95,-96,-97,]),'EQ':([17,18,27,28,29,30,32,34,38,39,65,83,87,88,89,90,91,92,107,118,128,129,130,131,132,133,134,135,136,137,138,],[-110,-108,72,-82,-84,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,72,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,]),'NE':([17,18,27,28,29,30,32,34,38,39,65,83,87,88,89,90,91,92,107,118,128,129,130,131,132,133,134,135,136,137,138,],[-110,-108,73,-82,-84,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,73,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,]),'BIT_AND':([17,18,26,27,28,29,30,32,34,38,39,65,83,87,88,89,90,91,92,107,118,127,128,129,130,131,132,133,134,135,136,137,138,],[-110,-108,71,-79,-82,-84,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,71,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,]),'BIT_XOR':([17,18,25,26,27,28,29,30,32,34,38,39,65,83,87,88,89,90,91,92,107,118,126,127,128,129,130,131,132,133,134,135,136,137,138,],[-110,-108,70,-77,-79,-82,-84,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,70,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,]),'BIT_OR':([17,18,24,25,26,27,28,29,30,32,34,38,39,65,83,87,88,89,90,91,92,107,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,],[-110,-108,69,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,-105,69,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,]),'AND':([17,18,23,24,25,26,27,28,29,30,32,34,38,39,65,83,87,88,89,90,91,92,107,117,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,],[-110,-108,68,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,-110,68,-105,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,]),'OR':([17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,65,83,87,88,89,90,91,92,106,107,117,118,125,126,127,128,129,130,131,132,133,134,135,136,137,138,],[-110,-108,63,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,-110,-100,-101,-99,-102,-103,-106,-107,63,-110,-70,-105,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,]),'COMMA':([17,18,20,23,24,25,26,27,28,29,30,32,34,38,39,65,66,83,87,88,89,90,91,92,106,107,110,115,117,118,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,146,151,152,154,175,179,183,188,],[-110,-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,-110,122,-100,-101,-99,-102,-103,-106,-107,-56,-110,148,153,-70,-105,161,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,122,171,172,174,184,189,-57,193,]),'R_PAREN':([18,20,23,24,25,26,27,28,29,30,32,34,38,39,61,64,65,83,87,88,89,90,91,92,98,106,107,110,111,112,114,115,117,118,121,125,126,127,128,129,130,131,132,133,134,135,136,137,138,147,150,151,152,157,158,160,169,175,177,181,183,188,192,],[-108,-58,-71,-73,-75,-77,-79,-82,-84,-91,-94,-98,-104,-109,-36,118,-110,-100,-101,-99,-102,-103,-106,-107,143,-56,-110,-46,149,-38,-40,-45,-70,-105,-36,-72,-74,-76,-78,-80,-81,-83,-89,-90,-92,-93,-95,-96,-97,-36,-39,-45,-46,176,-50,-52,183,-49,-51,191,-57,-49,194,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'multiple_statements':([0,19,],[2,62,]),'statement':([0,2,19,41,62,139,],[3,40,3,94,40,94,]),'open':([0,2,19,41,43,44,62,139,140,141,142,180,],[4,4,4,4,99,101,4,4,166,99,101,166,]),'closed':([0,2,19,41,43,44,62,139,140,141,142,180,],[5,5,5,95,100,102,5,164,165,100,102,165,]),'simple':([0,2,19,41,43,44,62,139,140,141,142,180,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'block':([0,2,19,41,43,44,62,139,140,141,142,176,180,],[10,10,10,10,10,10,10,10,10,10,10,187,10,]),'expr':([0,2,19,21,41,42,43,44,45,62,103,120,139,140,141,142,145,162,167,180,182,],[11,11,11,64,11,98,11,11,104,11,144,154,11,11,11,11,168,179,181,11,192,]),'declaration':([0,2,19,41,43,44,45,62,139,140,141,142,180,],[13,13,13,13,13,13,103,13,13,13,13,13,13,]),'function':([0,2,19,41,43,44,62,139,140,141,142,180,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'function_call':([0,2,19,41,43,44,62,120,139,140,141,142,180,],[15,15,15,15,15,15,15,155,15,15,15,15,15,]),'exprOR':([0,2,19,21,41,42,43,44,45,47,62,103,120,139,140,141,142,145,162,167,180,182,],[20,20,20,20,20,20,20,20,20,106,20,20,20,20,20,20,20,20,20,20,20,20,]),'exprAND':([0,2,19,21,41,42,43,44,45,47,62,63,103,120,139,140,141,142,145,162,167,180,182,],[23,23,23,23,23,23,23,23,23,23,23,117,23,23,23,23,23,23,23,23,23,23,23,]),'exprBITOR':([0,2,19,21,41,42,43,44,45,47,62,63,68,103,120,139,140,141,142,145,162,167,180,182,],[24,24,24,24,24,24,24,24,24,24,24,24,125,24,24,24,24,24,24,24,24,24,24,24,]),'exprBITXOR':([0,2,19,21,41,42,43,44,45,47,62,63,68,69,103,120,139,140,141,142,145,162,167,180,182,],[25,25,25,25,25,25,25,25,25,25,25,25,25,126,25,25,25,25,25,25,25,25,25,25,25,]),'exprBITAND':([0,2,19,21,41,42,43,44,45,47,62,63,68,69,70,103,120,139,140,141,142,145,162,167,180,182,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,127,26,26,26,26,26,26,26,26,26,26,26,]),'exprEQ':([0,2,19,21,41,42,43,44,45,47,62,63,68,69,70,71,103,120,139,140,141,142,145,162,167,180,182,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,128,27,27,27,27,27,27,27,27,27,27,27,]),'exprRELOP':([0,2,19,21,41,42,43,44,45,47,62,63,68,69,70,71,72,73,103,120,139,140,141,142,145,162,167,180,182,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,129,130,28,28,28,28,28,28,28,28,28,28,28,]),'exprSHIFT':([0,2,19,21,41,42,43,44,45,47,62,63,68,69,70,71,72,73,74,103,120,139,140,141,142,145,162,167,180,182,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,131,29,29,29,29,29,29,29,29,29,29,29,]),'exprOP':([0,2,19,21,41,42,43,44,45,47,62,63,68,69,70,71,72,73,74,79,80,103,120,139,140,141,142,145,162,167,180,182,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,132,133,30,30,30,30,30,30,30,30,30,30,30,]),'term':([0,2,19,21,41,42,43,44,45,47,62,63,68,69,70,71,72,73,74,79,80,81,82,103,120,139,140,141,142,145,162,167,180,182,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,134,135,32,32,32,32,32,32,32,32,32,32,32,]),'factor':([0,2,19,21,31,33,35,36,37,41,42,43,44,45,47,62,63,68,69,70,71,72,73,74,79,80,81,82,84,85,86,103,120,139,140,141,142,145,162,167,180,182,],[34,34,34,34,83,87,88,89,90,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,136,137,138,34,34,34,34,34,34,34,34,34,34,34,]),'brace':([0,2,19,21,31,33,35,36,37,41,42,43,44,45,47,62,63,68,69,70,71,72,73,74,79,80,81,82,84,85,86,103,120,139,140,141,142,145,162,167,180,182,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'condition':([6,7,93,96,],[41,43,139,141,]),'for_condition':([8,97,],[44,142,]),'assignment':([11,64,98,104,144,154,168,179,181,192,],[47,47,47,47,47,47,47,47,47,47,]),'multi_declaration':([22,105,],[67,67,]),'relop':([28,129,130,],[74,74,74,]),'call_params':([61,147,],[111,169,]),'empty':([61,121,147,],[112,158,112,]),'yes_call_params':([61,147,],[113,113,]),'end_call_params':([61,113,147,],[114,150,114,]),'stop':([67,],[123,]),'dec_params':([121,],[157,]),'yes_dec_params':([121,],[159,]),'end_dec_params':([121,159,],[160,177,]),'function_2':([176,],[185,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> multiple_statements','start',1,'p_start','parser_file.py',20),
  ('multiple_statements -> multiple_statements statement','multiple_statements',2,'p_multiple_statements','parser_file.py',27),
  ('multiple_statements -> statement','multiple_statements',1,'p_multiple_statements','parser_file.py',28),
  ('statement -> open','statement',1,'p_statement','parser_file.py',38),
  ('statement -> closed','statement',1,'p_statement','parser_file.py',39),
  ('open -> IF condition statement','open',3,'p_open','parser_file.py',46),
  ('open -> IF condition closed ELSE open','open',5,'p_open','parser_file.py',47),
  ('open -> WHILE condition open','open',3,'p_open','parser_file.py',48),
  ('open -> FOR for_condition open','open',3,'p_open','parser_file.py',49),
  ('closed -> simple','closed',1,'p_closed','parser_file.py',59),
  ('closed -> block','closed',1,'p_closed','parser_file.py',60),
  ('closed -> IF condition closed ELSE closed','closed',5,'p_closed','parser_file.py',61),
  ('closed -> WHILE condition closed','closed',3,'p_closed','parser_file.py',62),
  ('closed -> FOR for_condition closed','closed',3,'p_closed','parser_file.py',63),
  ('condition -> L_PAREN expr R_PAREN','condition',3,'p_condition','parser_file.py',81),
  ('for_condition -> L_PAREN declaration expr SEMICOLON expr R_PAREN','for_condition',6,'p_for_condition','parser_file.py',88),
  ('for_condition -> L_PAREN expr SEMICOLON expr SEMICOLON expr R_PAREN','for_condition',7,'p_for_condition','parser_file.py',89),
  ('multi_declaration -> multi_declaration ID COMMA','multi_declaration',3,'p_multi_declaration','parser_file.py',99),
  ('multi_declaration -> multi_declaration ID ASSIGN expr COMMA','multi_declaration',5,'p_multi_declaration','parser_file.py',100),
  ('multi_declaration -> ID COMMA','multi_declaration',2,'p_multi_declaration','parser_file.py',101),
  ('multi_declaration -> ID ASSIGN expr COMMA','multi_declaration',4,'p_multi_declaration','parser_file.py',102),
  ('stop -> ID SEMICOLON','stop',2,'p_stop','parser_file.py',116),
  ('stop -> ID ASSIGN expr SEMICOLON','stop',4,'p_stop','parser_file.py',117),
  ('declaration -> TYPE ID SEMICOLON','declaration',3,'p_declaration','parser_file.py',127),
  ('declaration -> TYPE ID ASSIGN expr SEMICOLON','declaration',5,'p_declaration','parser_file.py',128),
  ('declaration -> TYPE ID ASSIGN function_call','declaration',4,'p_declaration','parser_file.py',129),
  ('declaration -> TYPE multi_declaration stop','declaration',3,'p_declaration','parser_file.py',130),
  ('block -> L_FLOWBRACE multiple_statements R_FLOWBRACE','block',3,'p_block','parser_file.py',142),
  ('simple -> expr SEMICOLON','simple',2,'p_simple','parser_file.py',149),
  ('simple -> declaration','simple',1,'p_simple','parser_file.py',150),
  ('simple -> SEMICOLON','simple',1,'p_simple','parser_file.py',151),
  ('simple -> function','simple',1,'p_simple','parser_file.py',152),
  ('simple -> function_call','simple',1,'p_simple','parser_file.py',153),
  ('simple -> RETURN ID SEMICOLON','simple',3,'p_simple','parser_file.py',154),
  ('simple -> RETURN INT_NUM SEMICOLON','simple',3,'p_simple','parser_file.py',155),
  ('empty -> <empty>','empty',0,'p_empty','parser_file.py',166),
  ('function_call -> ID L_PAREN call_params R_PAREN SEMICOLON','function_call',5,'p_function_call','parser_file.py',172),
  ('call_params -> empty','call_params',1,'p_call_params','parser_file.py',182),
  ('call_params -> yes_call_params end_call_params','call_params',2,'p_call_params','parser_file.py',183),
  ('call_params -> end_call_params','call_params',1,'p_call_params','parser_file.py',184),
  ('yes_call_params -> yes_call_params INT_NUM COMMA','yes_call_params',3,'p_yes_call_params','parser_file.py',194),
  ('yes_call_params -> yes_call_params ID COMMA','yes_call_params',3,'p_yes_call_params','parser_file.py',195),
  ('yes_call_params -> INT_NUM COMMA','yes_call_params',2,'p_yes_call_params','parser_file.py',196),
  ('yes_call_params -> ID COMMA','yes_call_params',2,'p_yes_call_params','parser_file.py',197),
  ('end_call_params -> INT_NUM','end_call_params',1,'p_end_call_params','parser_file.py',209),
  ('end_call_params -> ID','end_call_params',1,'p_end_call_params','parser_file.py',210),
  ('yes_dec_params -> yes_dec_params TYPE ID COMMA','yes_dec_params',4,'p_yes_dec_params','parser_file.py',217),
  ('yes_dec_params -> TYPE ID COMMA','yes_dec_params',3,'p_yes_dec_params','parser_file.py',218),
  ('end_dec_params -> TYPE ID','end_dec_params',2,'p_end_dec_params','parser_file.py',228),
  ('dec_params -> empty','dec_params',1,'p_dec_params','parser_file.py',235),
  ('dec_params -> yes_dec_params end_dec_params','dec_params',2,'p_dec_params','parser_file.py',236),
  ('dec_params -> end_dec_params','dec_params',1,'p_dec_params','parser_file.py',237),
  ('function -> TYPE ID L_PAREN dec_params R_PAREN function_2','function',6,'p_function','parser_file.py',247),
  ('function_2 -> SEMICOLON','function_2',1,'p_function_2','parser_file.py',262),
  ('function_2 -> block','function_2',1,'p_function_2','parser_file.py',263),
  ('expr -> expr assignment exprOR','expr',3,'p_expr','parser_file.py',286),
  ('expr -> expr assignment ID L_PAREN call_params R_PAREN','expr',6,'p_expr','parser_file.py',287),
  ('expr -> exprOR','expr',1,'p_expr','parser_file.py',288),
  ('assignment -> ASSIGN','assignment',1,'p_assignment','parser_file.py',301),
  ('assignment -> PLUS_ASSIGN','assignment',1,'p_assignment','parser_file.py',302),
  ('assignment -> MINUS_ASSIGN','assignment',1,'p_assignment','parser_file.py',303),
  ('assignment -> MUL_ASSIGN','assignment',1,'p_assignment','parser_file.py',304),
  ('assignment -> DIV_ASSIGN','assignment',1,'p_assignment','parser_file.py',305),
  ('assignment -> AND_ASSIGN','assignment',1,'p_assignment','parser_file.py',306),
  ('assignment -> OR_ASSIGN','assignment',1,'p_assignment','parser_file.py',307),
  ('assignment -> XOR_ASSIGN','assignment',1,'p_assignment','parser_file.py',308),
  ('assignment -> MOD_ASSIGN','assignment',1,'p_assignment','parser_file.py',309),
  ('assignment -> L_SHIFT_ASSIGN','assignment',1,'p_assignment','parser_file.py',310),
  ('assignment -> R_SHIFT_ASSIGN','assignment',1,'p_assignment','parser_file.py',311),
  ('exprOR -> exprOR OR exprAND','exprOR',3,'p_exprOR','parser_file.py',318),
  ('exprOR -> exprAND','exprOR',1,'p_exprOR','parser_file.py',319),
  ('exprAND -> exprAND AND exprBITOR','exprAND',3,'p_exprAND','parser_file.py',329),
  ('exprAND -> exprBITOR','exprAND',1,'p_exprAND','parser_file.py',330),
  ('exprBITOR -> exprBITOR BIT_OR exprBITXOR','exprBITOR',3,'p_exprBITOR','parser_file.py',340),
  ('exprBITOR -> exprBITXOR','exprBITOR',1,'p_exprBITOR','parser_file.py',341),
  ('exprBITXOR -> exprBITXOR BIT_XOR exprBITAND','exprBITXOR',3,'p_exprBITXOR','parser_file.py',351),
  ('exprBITXOR -> exprBITAND','exprBITXOR',1,'p_exprBITXOR','parser_file.py',352),
  ('exprBITAND -> exprBITAND BIT_AND exprEQ','exprBITAND',3,'p_exprBITAND','parser_file.py',362),
  ('exprBITAND -> exprEQ','exprBITAND',1,'p_exprBITAND','parser_file.py',363),
  ('exprEQ -> exprEQ EQ exprRELOP','exprEQ',3,'p_exprEQ','parser_file.py',373),
  ('exprEQ -> exprEQ NE exprRELOP','exprEQ',3,'p_exprEQ','parser_file.py',374),
  ('exprEQ -> exprRELOP','exprEQ',1,'p_exprEQ','parser_file.py',375),
  ('exprRELOP -> exprRELOP relop exprSHIFT','exprRELOP',3,'p_exprRELOP','parser_file.py',385),
  ('exprRELOP -> exprSHIFT','exprRELOP',1,'p_exprRELOP','parser_file.py',386),
  ('relop -> LE','relop',1,'p_relop','parser_file.py',396),
  ('relop -> LT','relop',1,'p_relop','parser_file.py',397),
  ('relop -> GE','relop',1,'p_relop','parser_file.py',398),
  ('relop -> GT','relop',1,'p_relop','parser_file.py',399),
  ('exprSHIFT -> exprSHIFT L_SHIFT exprOP','exprSHIFT',3,'p_exprSHIFT','parser_file.py',406),
  ('exprSHIFT -> exprSHIFT R_SHIFT exprOP','exprSHIFT',3,'p_exprSHIFT','parser_file.py',407),
  ('exprSHIFT -> exprOP','exprSHIFT',1,'p_exprSHIFT','parser_file.py',408),
  ('exprOP -> exprOP PLUS term','exprOP',3,'p_exprOP','parser_file.py',418),
  ('exprOP -> exprOP MINUS term','exprOP',3,'p_exprOP','parser_file.py',419),
  ('exprOP -> term','exprOP',1,'p_exprOP','parser_file.py',420),
  ('term -> term MULTIPLY factor','term',3,'p_term','parser_file.py',430),
  ('term -> term DIVIDE factor','term',3,'p_term','parser_file.py',431),
  ('term -> term MOD factor','term',3,'p_term','parser_file.py',432),
  ('term -> factor','term',1,'p_term','parser_file.py',433),
  ('factor -> NOT factor','factor',2,'p_factor','parser_file.py',443),
  ('factor -> PLUS factor','factor',2,'p_factor','parser_file.py',444),
  ('factor -> MINUS factor','factor',2,'p_factor','parser_file.py',445),
  ('factor -> PLUS_PLUS factor','factor',2,'p_factor','parser_file.py',446),
  ('factor -> MINUS_MINUS factor','factor',2,'p_factor','parser_file.py',447),
  ('factor -> brace','factor',1,'p_factor','parser_file.py',448),
  ('brace -> L_PAREN expr R_PAREN','brace',3,'p_brace','parser_file.py',458),
  ('brace -> brace PLUS_PLUS','brace',2,'p_brace','parser_file.py',459),
  ('brace -> brace MINUS_MINUS','brace',2,'p_brace','parser_file.py',460),
  ('brace -> INT_NUM','brace',1,'p_brace','parser_file.py',461),
  ('brace -> FLOAT_NUM','brace',1,'p_brace','parser_file.py',462),
  ('brace -> ID','brace',1,'p_brace','parser_file.py',463),
]
