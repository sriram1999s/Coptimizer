Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FOR
    NEWLINE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> var_assign SEMICOLON
Rule 2     statement -> expression SEMICOLON
Rule 3     statement -> expression_unary SEMICOLON
Rule 4     statement -> while_loop
Rule 5     statement -> declare_statement
Rule 6     statement -> empty
Rule 7     statement_multiple -> statement
Rule 8     statement_multiple -> statement_multiple statement
Rule 9     block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE
Rule 10    while_loop -> WHILE condition block
Rule 11    while_loop -> WHILE condition statement
Rule 12    condition -> L_PAREN expression relop expression R_PAREN
Rule 13    relop -> LE
Rule 14    relop -> LT
Rule 15    relop -> GE
Rule 16    relop -> GT
Rule 17    relop -> NE
Rule 18    relop -> EQ
Rule 19    declare_statement -> TYPE ID SEMICOLON
Rule 20    declare_statement -> TYPE var_assign SEMICOLON
Rule 21    var_assign -> ID ASSIGN expression
Rule 22    expression -> expression MULTIPLY expression
Rule 23    expression -> expression DIVIDE expression
Rule 24    expression -> expression PLUS expression
Rule 25    expression -> expression MINUS expression
Rule 26    expression -> expression L_SHIFT expression
Rule 27    expression -> expression R_SHIFT expression
Rule 28    expression -> expression MOD expression
Rule 29    expression -> expression XOR expression
Rule 30    expression -> expression AND expression
Rule 31    expression -> expression OR expression
Rule 32    expression_unary -> post
Rule 33    expression_unary -> pre
Rule 34    post -> ID PLUS_PLUS
Rule 35    post -> ID MINUS_MINUS
Rule 36    pre -> PLUS_PLUS ID
Rule 37    pre -> MINUS_MINUS ID
Rule 38    expression -> INT
Rule 39    expression -> FLOAT
Rule 40    expression -> ID
Rule 41    empty -> <empty>

Terminals, with rules where they appear

AND                  : 30
ASSIGN               : 21
DIVIDE               : 23
EQ                   : 18
FLOAT                : 39
FOR                  : 
GE                   : 15
GT                   : 16
ID                   : 19 21 34 35 36 37 40
INT                  : 38
LE                   : 13
LT                   : 14
L_FLOWERBRACE        : 9
L_PAREN              : 12
L_SHIFT              : 26
MINUS                : 25
MINUS_MINUS          : 35 37
MOD                  : 28
MULTIPLY             : 22
NE                   : 17
NEWLINE              : 
OR                   : 31
PLUS                 : 24
PLUS_PLUS            : 34 36
R_FLOWERBRACE        : 9
R_PAREN              : 12
R_SHIFT              : 27
SEMICOLON            : 1 2 3 19 20
TYPE                 : 19 20
WHILE                : 10 11
XOR                  : 29
error                : 

Nonterminals, with rules where they appear

block                : 10
condition            : 10 11
declare_statement    : 5
empty                : 6
expression           : 2 12 12 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31
expression_unary     : 3
post                 : 32
pre                  : 33
relop                : 12
statement            : 7 8 11 0
statement_multiple   : 8 9
var_assign           : 1 20
while_loop           : 4

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . var_assign SEMICOLON
    (2) statement -> . expression SEMICOLON
    (3) statement -> . expression_unary SEMICOLON
    (4) statement -> . while_loop
    (5) statement -> . declare_statement
    (6) statement -> . empty
    (21) var_assign -> . ID ASSIGN expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID
    (32) expression_unary -> . post
    (33) expression_unary -> . pre
    (10) while_loop -> . WHILE condition block
    (11) while_loop -> . WHILE condition statement
    (19) declare_statement -> . TYPE ID SEMICOLON
    (20) declare_statement -> . TYPE var_assign SEMICOLON
    (41) empty -> .
    (34) post -> . ID PLUS_PLUS
    (35) post -> . ID MINUS_MINUS
    (36) pre -> . PLUS_PLUS ID
    (37) pre -> . MINUS_MINUS ID

    ID              shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    WHILE           shift and go to state 13
    TYPE            shift and go to state 14
    $end            reduce using rule 41 (empty -> .)
    PLUS_PLUS       shift and go to state 15
    MINUS_MINUS     shift and go to state 16

    statement                      shift and go to state 1
    var_assign                     shift and go to state 2
    expression                     shift and go to state 3
    expression_unary               shift and go to state 4
    while_loop                     shift and go to state 5
    declare_statement              shift and go to state 6
    empty                          shift and go to state 7
    post                           shift and go to state 11
    pre                            shift and go to state 12

state 1

    (0) S' -> statement .



state 2

    (1) statement -> var_assign . SEMICOLON

    SEMICOLON       shift and go to state 17


state 3

    (2) statement -> expression . SEMICOLON
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    SEMICOLON       shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    L_SHIFT         shift and go to state 23
    R_SHIFT         shift and go to state 24
    MOD             shift and go to state 25
    XOR             shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28


state 4

    (3) statement -> expression_unary . SEMICOLON

    SEMICOLON       shift and go to state 29


state 5

    (4) statement -> while_loop .

    $end            reduce using rule 4 (statement -> while_loop .)
    R_FLOWERBRACE   reduce using rule 4 (statement -> while_loop .)
    ID              reduce using rule 4 (statement -> while_loop .)
    INT             reduce using rule 4 (statement -> while_loop .)
    FLOAT           reduce using rule 4 (statement -> while_loop .)
    WHILE           reduce using rule 4 (statement -> while_loop .)
    TYPE            reduce using rule 4 (statement -> while_loop .)
    PLUS_PLUS       reduce using rule 4 (statement -> while_loop .)
    MINUS_MINUS     reduce using rule 4 (statement -> while_loop .)


state 6

    (5) statement -> declare_statement .

    $end            reduce using rule 5 (statement -> declare_statement .)
    R_FLOWERBRACE   reduce using rule 5 (statement -> declare_statement .)
    ID              reduce using rule 5 (statement -> declare_statement .)
    INT             reduce using rule 5 (statement -> declare_statement .)
    FLOAT           reduce using rule 5 (statement -> declare_statement .)
    WHILE           reduce using rule 5 (statement -> declare_statement .)
    TYPE            reduce using rule 5 (statement -> declare_statement .)
    PLUS_PLUS       reduce using rule 5 (statement -> declare_statement .)
    MINUS_MINUS     reduce using rule 5 (statement -> declare_statement .)


state 7

    (6) statement -> empty .

    $end            reduce using rule 6 (statement -> empty .)
    R_FLOWERBRACE   reduce using rule 6 (statement -> empty .)
    ID              reduce using rule 6 (statement -> empty .)
    INT             reduce using rule 6 (statement -> empty .)
    FLOAT           reduce using rule 6 (statement -> empty .)
    WHILE           reduce using rule 6 (statement -> empty .)
    TYPE            reduce using rule 6 (statement -> empty .)
    PLUS_PLUS       reduce using rule 6 (statement -> empty .)
    MINUS_MINUS     reduce using rule 6 (statement -> empty .)


state 8

    (21) var_assign -> ID . ASSIGN expression
    (40) expression -> ID .
    (34) post -> ID . PLUS_PLUS
    (35) post -> ID . MINUS_MINUS

    ASSIGN          shift and go to state 30
    SEMICOLON       reduce using rule 40 (expression -> ID .)
    MULTIPLY        reduce using rule 40 (expression -> ID .)
    DIVIDE          reduce using rule 40 (expression -> ID .)
    PLUS            reduce using rule 40 (expression -> ID .)
    MINUS           reduce using rule 40 (expression -> ID .)
    L_SHIFT         reduce using rule 40 (expression -> ID .)
    R_SHIFT         reduce using rule 40 (expression -> ID .)
    MOD             reduce using rule 40 (expression -> ID .)
    XOR             reduce using rule 40 (expression -> ID .)
    AND             reduce using rule 40 (expression -> ID .)
    OR              reduce using rule 40 (expression -> ID .)
    PLUS_PLUS       shift and go to state 31
    MINUS_MINUS     shift and go to state 32


state 9

    (38) expression -> INT .

    SEMICOLON       reduce using rule 38 (expression -> INT .)
    MULTIPLY        reduce using rule 38 (expression -> INT .)
    DIVIDE          reduce using rule 38 (expression -> INT .)
    PLUS            reduce using rule 38 (expression -> INT .)
    MINUS           reduce using rule 38 (expression -> INT .)
    L_SHIFT         reduce using rule 38 (expression -> INT .)
    R_SHIFT         reduce using rule 38 (expression -> INT .)
    MOD             reduce using rule 38 (expression -> INT .)
    XOR             reduce using rule 38 (expression -> INT .)
    AND             reduce using rule 38 (expression -> INT .)
    OR              reduce using rule 38 (expression -> INT .)
    LE              reduce using rule 38 (expression -> INT .)
    LT              reduce using rule 38 (expression -> INT .)
    GE              reduce using rule 38 (expression -> INT .)
    GT              reduce using rule 38 (expression -> INT .)
    NE              reduce using rule 38 (expression -> INT .)
    EQ              reduce using rule 38 (expression -> INT .)
    R_PAREN         reduce using rule 38 (expression -> INT .)


state 10

    (39) expression -> FLOAT .

    SEMICOLON       reduce using rule 39 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 39 (expression -> FLOAT .)
    DIVIDE          reduce using rule 39 (expression -> FLOAT .)
    PLUS            reduce using rule 39 (expression -> FLOAT .)
    MINUS           reduce using rule 39 (expression -> FLOAT .)
    L_SHIFT         reduce using rule 39 (expression -> FLOAT .)
    R_SHIFT         reduce using rule 39 (expression -> FLOAT .)
    MOD             reduce using rule 39 (expression -> FLOAT .)
    XOR             reduce using rule 39 (expression -> FLOAT .)
    AND             reduce using rule 39 (expression -> FLOAT .)
    OR              reduce using rule 39 (expression -> FLOAT .)
    LE              reduce using rule 39 (expression -> FLOAT .)
    LT              reduce using rule 39 (expression -> FLOAT .)
    GE              reduce using rule 39 (expression -> FLOAT .)
    GT              reduce using rule 39 (expression -> FLOAT .)
    NE              reduce using rule 39 (expression -> FLOAT .)
    EQ              reduce using rule 39 (expression -> FLOAT .)
    R_PAREN         reduce using rule 39 (expression -> FLOAT .)


state 11

    (32) expression_unary -> post .

    SEMICOLON       reduce using rule 32 (expression_unary -> post .)


state 12

    (33) expression_unary -> pre .

    SEMICOLON       reduce using rule 33 (expression_unary -> pre .)


state 13

    (10) while_loop -> WHILE . condition block
    (11) while_loop -> WHILE . condition statement
    (12) condition -> . L_PAREN expression relop expression R_PAREN

    L_PAREN         shift and go to state 34

    condition                      shift and go to state 33

state 14

    (19) declare_statement -> TYPE . ID SEMICOLON
    (20) declare_statement -> TYPE . var_assign SEMICOLON
    (21) var_assign -> . ID ASSIGN expression

    ID              shift and go to state 35

    var_assign                     shift and go to state 36

state 15

    (36) pre -> PLUS_PLUS . ID

    ID              shift and go to state 37


state 16

    (37) pre -> MINUS_MINUS . ID

    ID              shift and go to state 38


state 17

    (1) statement -> var_assign SEMICOLON .

    $end            reduce using rule 1 (statement -> var_assign SEMICOLON .)
    R_FLOWERBRACE   reduce using rule 1 (statement -> var_assign SEMICOLON .)
    ID              reduce using rule 1 (statement -> var_assign SEMICOLON .)
    INT             reduce using rule 1 (statement -> var_assign SEMICOLON .)
    FLOAT           reduce using rule 1 (statement -> var_assign SEMICOLON .)
    WHILE           reduce using rule 1 (statement -> var_assign SEMICOLON .)
    TYPE            reduce using rule 1 (statement -> var_assign SEMICOLON .)
    PLUS_PLUS       reduce using rule 1 (statement -> var_assign SEMICOLON .)
    MINUS_MINUS     reduce using rule 1 (statement -> var_assign SEMICOLON .)


state 18

    (2) statement -> expression SEMICOLON .

    $end            reduce using rule 2 (statement -> expression SEMICOLON .)
    R_FLOWERBRACE   reduce using rule 2 (statement -> expression SEMICOLON .)
    ID              reduce using rule 2 (statement -> expression SEMICOLON .)
    INT             reduce using rule 2 (statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 2 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 2 (statement -> expression SEMICOLON .)
    TYPE            reduce using rule 2 (statement -> expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 2 (statement -> expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 2 (statement -> expression SEMICOLON .)


state 19

    (22) expression -> expression MULTIPLY . expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 39

state 20

    (23) expression -> expression DIVIDE . expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 41

state 21

    (24) expression -> expression PLUS . expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 42

state 22

    (25) expression -> expression MINUS . expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 43

state 23

    (26) expression -> expression L_SHIFT . expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 44

state 24

    (27) expression -> expression R_SHIFT . expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 45

state 25

    (28) expression -> expression MOD . expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 46

state 26

    (29) expression -> expression XOR . expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 47

state 27

    (30) expression -> expression AND . expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 48

state 28

    (31) expression -> expression OR . expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 49

state 29

    (3) statement -> expression_unary SEMICOLON .

    $end            reduce using rule 3 (statement -> expression_unary SEMICOLON .)
    R_FLOWERBRACE   reduce using rule 3 (statement -> expression_unary SEMICOLON .)
    ID              reduce using rule 3 (statement -> expression_unary SEMICOLON .)
    INT             reduce using rule 3 (statement -> expression_unary SEMICOLON .)
    FLOAT           reduce using rule 3 (statement -> expression_unary SEMICOLON .)
    WHILE           reduce using rule 3 (statement -> expression_unary SEMICOLON .)
    TYPE            reduce using rule 3 (statement -> expression_unary SEMICOLON .)
    PLUS_PLUS       reduce using rule 3 (statement -> expression_unary SEMICOLON .)
    MINUS_MINUS     reduce using rule 3 (statement -> expression_unary SEMICOLON .)


state 30

    (21) var_assign -> ID ASSIGN . expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 50

state 31

    (34) post -> ID PLUS_PLUS .

    SEMICOLON       reduce using rule 34 (post -> ID PLUS_PLUS .)


state 32

    (35) post -> ID MINUS_MINUS .

    SEMICOLON       reduce using rule 35 (post -> ID MINUS_MINUS .)


state 33

    (10) while_loop -> WHILE condition . block
    (11) while_loop -> WHILE condition . statement
    (9) block -> . L_FLOWERBRACE statement_multiple R_FLOWERBRACE
    (1) statement -> . var_assign SEMICOLON
    (2) statement -> . expression SEMICOLON
    (3) statement -> . expression_unary SEMICOLON
    (4) statement -> . while_loop
    (5) statement -> . declare_statement
    (6) statement -> . empty
    (21) var_assign -> . ID ASSIGN expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID
    (32) expression_unary -> . post
    (33) expression_unary -> . pre
    (10) while_loop -> . WHILE condition block
    (11) while_loop -> . WHILE condition statement
    (19) declare_statement -> . TYPE ID SEMICOLON
    (20) declare_statement -> . TYPE var_assign SEMICOLON
    (41) empty -> .
    (34) post -> . ID PLUS_PLUS
    (35) post -> . ID MINUS_MINUS
    (36) pre -> . PLUS_PLUS ID
    (37) pre -> . MINUS_MINUS ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
    L_FLOWERBRACE   shift and go to state 53
    ID              shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    WHILE           shift and go to state 13
    TYPE            shift and go to state 14
    $end            reduce using rule 41 (empty -> .)
    R_FLOWERBRACE   reduce using rule 41 (empty -> .)
    PLUS_PLUS       shift and go to state 15
    MINUS_MINUS     shift and go to state 16

  ! ID              [ reduce using rule 41 (empty -> .) ]
  ! INT             [ reduce using rule 41 (empty -> .) ]
  ! FLOAT           [ reduce using rule 41 (empty -> .) ]
  ! WHILE           [ reduce using rule 41 (empty -> .) ]
  ! TYPE            [ reduce using rule 41 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 41 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 41 (empty -> .) ]

    block                          shift and go to state 51
    statement                      shift and go to state 52
    var_assign                     shift and go to state 2
    expression                     shift and go to state 3
    expression_unary               shift and go to state 4
    while_loop                     shift and go to state 5
    declare_statement              shift and go to state 6
    empty                          shift and go to state 7
    post                           shift and go to state 11
    pre                            shift and go to state 12

state 34

    (12) condition -> L_PAREN . expression relop expression R_PAREN
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 54

state 35

    (19) declare_statement -> TYPE ID . SEMICOLON
    (21) var_assign -> ID . ASSIGN expression

    SEMICOLON       shift and go to state 55
    ASSIGN          shift and go to state 30


state 36

    (20) declare_statement -> TYPE var_assign . SEMICOLON

    SEMICOLON       shift and go to state 56


state 37

    (36) pre -> PLUS_PLUS ID .

    SEMICOLON       reduce using rule 36 (pre -> PLUS_PLUS ID .)


state 38

    (37) pre -> MINUS_MINUS ID .

    SEMICOLON       reduce using rule 37 (pre -> MINUS_MINUS ID .)


state 39

    (22) expression -> expression MULTIPLY expression .
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    SEMICOLON       reduce using rule 22 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 22 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 22 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 22 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 22 (expression -> expression MULTIPLY expression .)
    L_SHIFT         reduce using rule 22 (expression -> expression MULTIPLY expression .)
    R_SHIFT         reduce using rule 22 (expression -> expression MULTIPLY expression .)
    MOD             reduce using rule 22 (expression -> expression MULTIPLY expression .)
    XOR             reduce using rule 22 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 22 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 22 (expression -> expression MULTIPLY expression .)
    LE              reduce using rule 22 (expression -> expression MULTIPLY expression .)
    LT              reduce using rule 22 (expression -> expression MULTIPLY expression .)
    GE              reduce using rule 22 (expression -> expression MULTIPLY expression .)
    GT              reduce using rule 22 (expression -> expression MULTIPLY expression .)
    NE              reduce using rule 22 (expression -> expression MULTIPLY expression .)
    EQ              reduce using rule 22 (expression -> expression MULTIPLY expression .)
    R_PAREN         reduce using rule 22 (expression -> expression MULTIPLY expression .)

  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! L_SHIFT         [ shift and go to state 23 ]
  ! R_SHIFT         [ shift and go to state 24 ]
  ! MOD             [ shift and go to state 25 ]
  ! XOR             [ shift and go to state 26 ]
  ! AND             [ shift and go to state 27 ]
  ! OR              [ shift and go to state 28 ]


state 40

    (40) expression -> ID .

    MULTIPLY        reduce using rule 40 (expression -> ID .)
    DIVIDE          reduce using rule 40 (expression -> ID .)
    PLUS            reduce using rule 40 (expression -> ID .)
    MINUS           reduce using rule 40 (expression -> ID .)
    L_SHIFT         reduce using rule 40 (expression -> ID .)
    R_SHIFT         reduce using rule 40 (expression -> ID .)
    MOD             reduce using rule 40 (expression -> ID .)
    XOR             reduce using rule 40 (expression -> ID .)
    AND             reduce using rule 40 (expression -> ID .)
    OR              reduce using rule 40 (expression -> ID .)
    SEMICOLON       reduce using rule 40 (expression -> ID .)
    LE              reduce using rule 40 (expression -> ID .)
    LT              reduce using rule 40 (expression -> ID .)
    GE              reduce using rule 40 (expression -> ID .)
    GT              reduce using rule 40 (expression -> ID .)
    NE              reduce using rule 40 (expression -> ID .)
    EQ              reduce using rule 40 (expression -> ID .)
    R_PAREN         reduce using rule 40 (expression -> ID .)


state 41

    (23) expression -> expression DIVIDE expression .
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    SEMICOLON       reduce using rule 23 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 23 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 23 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 23 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 23 (expression -> expression DIVIDE expression .)
    L_SHIFT         reduce using rule 23 (expression -> expression DIVIDE expression .)
    R_SHIFT         reduce using rule 23 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 23 (expression -> expression DIVIDE expression .)
    XOR             reduce using rule 23 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 23 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 23 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 23 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 23 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 23 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 23 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 23 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 23 (expression -> expression DIVIDE expression .)
    R_PAREN         reduce using rule 23 (expression -> expression DIVIDE expression .)

  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! L_SHIFT         [ shift and go to state 23 ]
  ! R_SHIFT         [ shift and go to state 24 ]
  ! MOD             [ shift and go to state 25 ]
  ! XOR             [ shift and go to state 26 ]
  ! AND             [ shift and go to state 27 ]
  ! OR              [ shift and go to state 28 ]


state 42

    (24) expression -> expression PLUS expression .
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    SEMICOLON       reduce using rule 24 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 24 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 24 (expression -> expression PLUS expression .)
    L_SHIFT         reduce using rule 24 (expression -> expression PLUS expression .)
    R_SHIFT         reduce using rule 24 (expression -> expression PLUS expression .)
    MOD             reduce using rule 24 (expression -> expression PLUS expression .)
    XOR             reduce using rule 24 (expression -> expression PLUS expression .)
    AND             reduce using rule 24 (expression -> expression PLUS expression .)
    OR              reduce using rule 24 (expression -> expression PLUS expression .)
    LE              reduce using rule 24 (expression -> expression PLUS expression .)
    LT              reduce using rule 24 (expression -> expression PLUS expression .)
    GE              reduce using rule 24 (expression -> expression PLUS expression .)
    GT              reduce using rule 24 (expression -> expression PLUS expression .)
    NE              reduce using rule 24 (expression -> expression PLUS expression .)
    EQ              reduce using rule 24 (expression -> expression PLUS expression .)
    R_PAREN         reduce using rule 24 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20

  ! MULTIPLY        [ reduce using rule 24 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 24 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! L_SHIFT         [ shift and go to state 23 ]
  ! R_SHIFT         [ shift and go to state 24 ]
  ! MOD             [ shift and go to state 25 ]
  ! XOR             [ shift and go to state 26 ]
  ! AND             [ shift and go to state 27 ]
  ! OR              [ shift and go to state 28 ]


state 43

    (25) expression -> expression MINUS expression .
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    SEMICOLON       reduce using rule 25 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 25 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 25 (expression -> expression MINUS expression .)
    L_SHIFT         reduce using rule 25 (expression -> expression MINUS expression .)
    R_SHIFT         reduce using rule 25 (expression -> expression MINUS expression .)
    MOD             reduce using rule 25 (expression -> expression MINUS expression .)
    XOR             reduce using rule 25 (expression -> expression MINUS expression .)
    AND             reduce using rule 25 (expression -> expression MINUS expression .)
    OR              reduce using rule 25 (expression -> expression MINUS expression .)
    LE              reduce using rule 25 (expression -> expression MINUS expression .)
    LT              reduce using rule 25 (expression -> expression MINUS expression .)
    GE              reduce using rule 25 (expression -> expression MINUS expression .)
    GT              reduce using rule 25 (expression -> expression MINUS expression .)
    NE              reduce using rule 25 (expression -> expression MINUS expression .)
    EQ              reduce using rule 25 (expression -> expression MINUS expression .)
    R_PAREN         reduce using rule 25 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20

  ! MULTIPLY        [ reduce using rule 25 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! L_SHIFT         [ shift and go to state 23 ]
  ! R_SHIFT         [ shift and go to state 24 ]
  ! MOD             [ shift and go to state 25 ]
  ! XOR             [ shift and go to state 26 ]
  ! AND             [ shift and go to state 27 ]
  ! OR              [ shift and go to state 28 ]


state 44

    (26) expression -> expression L_SHIFT expression .
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 26 (expression -> expression L_SHIFT expression .)
    LE              reduce using rule 26 (expression -> expression L_SHIFT expression .)
    LT              reduce using rule 26 (expression -> expression L_SHIFT expression .)
    GE              reduce using rule 26 (expression -> expression L_SHIFT expression .)
    GT              reduce using rule 26 (expression -> expression L_SHIFT expression .)
    NE              reduce using rule 26 (expression -> expression L_SHIFT expression .)
    EQ              reduce using rule 26 (expression -> expression L_SHIFT expression .)
    R_PAREN         reduce using rule 26 (expression -> expression L_SHIFT expression .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    L_SHIFT         shift and go to state 23
    R_SHIFT         shift and go to state 24
    MOD             shift and go to state 25
    XOR             shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! MULTIPLY        [ reduce using rule 26 (expression -> expression L_SHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 26 (expression -> expression L_SHIFT expression .) ]
  ! PLUS            [ reduce using rule 26 (expression -> expression L_SHIFT expression .) ]
  ! MINUS           [ reduce using rule 26 (expression -> expression L_SHIFT expression .) ]
  ! L_SHIFT         [ reduce using rule 26 (expression -> expression L_SHIFT expression .) ]
  ! R_SHIFT         [ reduce using rule 26 (expression -> expression L_SHIFT expression .) ]
  ! MOD             [ reduce using rule 26 (expression -> expression L_SHIFT expression .) ]
  ! XOR             [ reduce using rule 26 (expression -> expression L_SHIFT expression .) ]
  ! AND             [ reduce using rule 26 (expression -> expression L_SHIFT expression .) ]
  ! OR              [ reduce using rule 26 (expression -> expression L_SHIFT expression .) ]


state 45

    (27) expression -> expression R_SHIFT expression .
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 27 (expression -> expression R_SHIFT expression .)
    LE              reduce using rule 27 (expression -> expression R_SHIFT expression .)
    LT              reduce using rule 27 (expression -> expression R_SHIFT expression .)
    GE              reduce using rule 27 (expression -> expression R_SHIFT expression .)
    GT              reduce using rule 27 (expression -> expression R_SHIFT expression .)
    NE              reduce using rule 27 (expression -> expression R_SHIFT expression .)
    EQ              reduce using rule 27 (expression -> expression R_SHIFT expression .)
    R_PAREN         reduce using rule 27 (expression -> expression R_SHIFT expression .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    L_SHIFT         shift and go to state 23
    R_SHIFT         shift and go to state 24
    MOD             shift and go to state 25
    XOR             shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! MULTIPLY        [ reduce using rule 27 (expression -> expression R_SHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 27 (expression -> expression R_SHIFT expression .) ]
  ! PLUS            [ reduce using rule 27 (expression -> expression R_SHIFT expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> expression R_SHIFT expression .) ]
  ! L_SHIFT         [ reduce using rule 27 (expression -> expression R_SHIFT expression .) ]
  ! R_SHIFT         [ reduce using rule 27 (expression -> expression R_SHIFT expression .) ]
  ! MOD             [ reduce using rule 27 (expression -> expression R_SHIFT expression .) ]
  ! XOR             [ reduce using rule 27 (expression -> expression R_SHIFT expression .) ]
  ! AND             [ reduce using rule 27 (expression -> expression R_SHIFT expression .) ]
  ! OR              [ reduce using rule 27 (expression -> expression R_SHIFT expression .) ]


state 46

    (28) expression -> expression MOD expression .
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 28 (expression -> expression MOD expression .)
    LE              reduce using rule 28 (expression -> expression MOD expression .)
    LT              reduce using rule 28 (expression -> expression MOD expression .)
    GE              reduce using rule 28 (expression -> expression MOD expression .)
    GT              reduce using rule 28 (expression -> expression MOD expression .)
    NE              reduce using rule 28 (expression -> expression MOD expression .)
    EQ              reduce using rule 28 (expression -> expression MOD expression .)
    R_PAREN         reduce using rule 28 (expression -> expression MOD expression .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    L_SHIFT         shift and go to state 23
    R_SHIFT         shift and go to state 24
    MOD             shift and go to state 25
    XOR             shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! MULTIPLY        [ reduce using rule 28 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 28 (expression -> expression MOD expression .) ]
  ! PLUS            [ reduce using rule 28 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 28 (expression -> expression MOD expression .) ]
  ! L_SHIFT         [ reduce using rule 28 (expression -> expression MOD expression .) ]
  ! R_SHIFT         [ reduce using rule 28 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 28 (expression -> expression MOD expression .) ]
  ! XOR             [ reduce using rule 28 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 28 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 28 (expression -> expression MOD expression .) ]


state 47

    (29) expression -> expression XOR expression .
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 29 (expression -> expression XOR expression .)
    LE              reduce using rule 29 (expression -> expression XOR expression .)
    LT              reduce using rule 29 (expression -> expression XOR expression .)
    GE              reduce using rule 29 (expression -> expression XOR expression .)
    GT              reduce using rule 29 (expression -> expression XOR expression .)
    NE              reduce using rule 29 (expression -> expression XOR expression .)
    EQ              reduce using rule 29 (expression -> expression XOR expression .)
    R_PAREN         reduce using rule 29 (expression -> expression XOR expression .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    L_SHIFT         shift and go to state 23
    R_SHIFT         shift and go to state 24
    MOD             shift and go to state 25
    XOR             shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! MULTIPLY        [ reduce using rule 29 (expression -> expression XOR expression .) ]
  ! DIVIDE          [ reduce using rule 29 (expression -> expression XOR expression .) ]
  ! PLUS            [ reduce using rule 29 (expression -> expression XOR expression .) ]
  ! MINUS           [ reduce using rule 29 (expression -> expression XOR expression .) ]
  ! L_SHIFT         [ reduce using rule 29 (expression -> expression XOR expression .) ]
  ! R_SHIFT         [ reduce using rule 29 (expression -> expression XOR expression .) ]
  ! MOD             [ reduce using rule 29 (expression -> expression XOR expression .) ]
  ! XOR             [ reduce using rule 29 (expression -> expression XOR expression .) ]
  ! AND             [ reduce using rule 29 (expression -> expression XOR expression .) ]
  ! OR              [ reduce using rule 29 (expression -> expression XOR expression .) ]


state 48

    (30) expression -> expression AND expression .
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 30 (expression -> expression AND expression .)
    LE              reduce using rule 30 (expression -> expression AND expression .)
    LT              reduce using rule 30 (expression -> expression AND expression .)
    GE              reduce using rule 30 (expression -> expression AND expression .)
    GT              reduce using rule 30 (expression -> expression AND expression .)
    NE              reduce using rule 30 (expression -> expression AND expression .)
    EQ              reduce using rule 30 (expression -> expression AND expression .)
    R_PAREN         reduce using rule 30 (expression -> expression AND expression .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    L_SHIFT         shift and go to state 23
    R_SHIFT         shift and go to state 24
    MOD             shift and go to state 25
    XOR             shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! MULTIPLY        [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! L_SHIFT         [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! R_SHIFT         [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! XOR             [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 30 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 30 (expression -> expression AND expression .) ]


state 49

    (31) expression -> expression OR expression .
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 31 (expression -> expression OR expression .)
    LE              reduce using rule 31 (expression -> expression OR expression .)
    LT              reduce using rule 31 (expression -> expression OR expression .)
    GE              reduce using rule 31 (expression -> expression OR expression .)
    GT              reduce using rule 31 (expression -> expression OR expression .)
    NE              reduce using rule 31 (expression -> expression OR expression .)
    EQ              reduce using rule 31 (expression -> expression OR expression .)
    R_PAREN         reduce using rule 31 (expression -> expression OR expression .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    L_SHIFT         shift and go to state 23
    R_SHIFT         shift and go to state 24
    MOD             shift and go to state 25
    XOR             shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! MULTIPLY        [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! L_SHIFT         [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! R_SHIFT         [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! XOR             [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 31 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 31 (expression -> expression OR expression .) ]


state 50

    (21) var_assign -> ID ASSIGN expression .
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    SEMICOLON       reduce using rule 21 (var_assign -> ID ASSIGN expression .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    L_SHIFT         shift and go to state 23
    R_SHIFT         shift and go to state 24
    MOD             shift and go to state 25
    XOR             shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28


state 51

    (10) while_loop -> WHILE condition block .

    $end            reduce using rule 10 (while_loop -> WHILE condition block .)
    R_FLOWERBRACE   reduce using rule 10 (while_loop -> WHILE condition block .)
    ID              reduce using rule 10 (while_loop -> WHILE condition block .)
    INT             reduce using rule 10 (while_loop -> WHILE condition block .)
    FLOAT           reduce using rule 10 (while_loop -> WHILE condition block .)
    WHILE           reduce using rule 10 (while_loop -> WHILE condition block .)
    TYPE            reduce using rule 10 (while_loop -> WHILE condition block .)
    PLUS_PLUS       reduce using rule 10 (while_loop -> WHILE condition block .)
    MINUS_MINUS     reduce using rule 10 (while_loop -> WHILE condition block .)


state 52

    (11) while_loop -> WHILE condition statement .

    $end            reduce using rule 11 (while_loop -> WHILE condition statement .)
    R_FLOWERBRACE   reduce using rule 11 (while_loop -> WHILE condition statement .)
    ID              reduce using rule 11 (while_loop -> WHILE condition statement .)
    INT             reduce using rule 11 (while_loop -> WHILE condition statement .)
    FLOAT           reduce using rule 11 (while_loop -> WHILE condition statement .)
    WHILE           reduce using rule 11 (while_loop -> WHILE condition statement .)
    TYPE            reduce using rule 11 (while_loop -> WHILE condition statement .)
    PLUS_PLUS       reduce using rule 11 (while_loop -> WHILE condition statement .)
    MINUS_MINUS     reduce using rule 11 (while_loop -> WHILE condition statement .)


state 53

    (9) block -> L_FLOWERBRACE . statement_multiple R_FLOWERBRACE
    (7) statement_multiple -> . statement
    (8) statement_multiple -> . statement_multiple statement
    (1) statement -> . var_assign SEMICOLON
    (2) statement -> . expression SEMICOLON
    (3) statement -> . expression_unary SEMICOLON
    (4) statement -> . while_loop
    (5) statement -> . declare_statement
    (6) statement -> . empty
    (21) var_assign -> . ID ASSIGN expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID
    (32) expression_unary -> . post
    (33) expression_unary -> . pre
    (10) while_loop -> . WHILE condition block
    (11) while_loop -> . WHILE condition statement
    (19) declare_statement -> . TYPE ID SEMICOLON
    (20) declare_statement -> . TYPE var_assign SEMICOLON
    (41) empty -> .
    (34) post -> . ID PLUS_PLUS
    (35) post -> . ID MINUS_MINUS
    (36) pre -> . PLUS_PLUS ID
    (37) pre -> . MINUS_MINUS ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
    ID              shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    WHILE           shift and go to state 13
    TYPE            shift and go to state 14
    R_FLOWERBRACE   reduce using rule 41 (empty -> .)
    PLUS_PLUS       shift and go to state 15
    MINUS_MINUS     shift and go to state 16

  ! ID              [ reduce using rule 41 (empty -> .) ]
  ! INT             [ reduce using rule 41 (empty -> .) ]
  ! FLOAT           [ reduce using rule 41 (empty -> .) ]
  ! WHILE           [ reduce using rule 41 (empty -> .) ]
  ! TYPE            [ reduce using rule 41 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 41 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 41 (empty -> .) ]

    statement_multiple             shift and go to state 57
    statement                      shift and go to state 58
    var_assign                     shift and go to state 2
    expression                     shift and go to state 3
    expression_unary               shift and go to state 4
    while_loop                     shift and go to state 5
    declare_statement              shift and go to state 6
    empty                          shift and go to state 7
    post                           shift and go to state 11
    pre                            shift and go to state 12

state 54

    (12) condition -> L_PAREN expression . relop expression R_PAREN
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression
    (13) relop -> . LE
    (14) relop -> . LT
    (15) relop -> . GE
    (16) relop -> . GT
    (17) relop -> . NE
    (18) relop -> . EQ

    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    L_SHIFT         shift and go to state 23
    R_SHIFT         shift and go to state 24
    MOD             shift and go to state 25
    XOR             shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28
    LE              shift and go to state 60
    LT              shift and go to state 61
    GE              shift and go to state 62
    GT              shift and go to state 63
    NE              shift and go to state 64
    EQ              shift and go to state 65

    relop                          shift and go to state 59

state 55

    (19) declare_statement -> TYPE ID SEMICOLON .

    $end            reduce using rule 19 (declare_statement -> TYPE ID SEMICOLON .)
    R_FLOWERBRACE   reduce using rule 19 (declare_statement -> TYPE ID SEMICOLON .)
    ID              reduce using rule 19 (declare_statement -> TYPE ID SEMICOLON .)
    INT             reduce using rule 19 (declare_statement -> TYPE ID SEMICOLON .)
    FLOAT           reduce using rule 19 (declare_statement -> TYPE ID SEMICOLON .)
    WHILE           reduce using rule 19 (declare_statement -> TYPE ID SEMICOLON .)
    TYPE            reduce using rule 19 (declare_statement -> TYPE ID SEMICOLON .)
    PLUS_PLUS       reduce using rule 19 (declare_statement -> TYPE ID SEMICOLON .)
    MINUS_MINUS     reduce using rule 19 (declare_statement -> TYPE ID SEMICOLON .)


state 56

    (20) declare_statement -> TYPE var_assign SEMICOLON .

    $end            reduce using rule 20 (declare_statement -> TYPE var_assign SEMICOLON .)
    R_FLOWERBRACE   reduce using rule 20 (declare_statement -> TYPE var_assign SEMICOLON .)
    ID              reduce using rule 20 (declare_statement -> TYPE var_assign SEMICOLON .)
    INT             reduce using rule 20 (declare_statement -> TYPE var_assign SEMICOLON .)
    FLOAT           reduce using rule 20 (declare_statement -> TYPE var_assign SEMICOLON .)
    WHILE           reduce using rule 20 (declare_statement -> TYPE var_assign SEMICOLON .)
    TYPE            reduce using rule 20 (declare_statement -> TYPE var_assign SEMICOLON .)
    PLUS_PLUS       reduce using rule 20 (declare_statement -> TYPE var_assign SEMICOLON .)
    MINUS_MINUS     reduce using rule 20 (declare_statement -> TYPE var_assign SEMICOLON .)


state 57

    (9) block -> L_FLOWERBRACE statement_multiple . R_FLOWERBRACE
    (8) statement_multiple -> statement_multiple . statement
    (1) statement -> . var_assign SEMICOLON
    (2) statement -> . expression SEMICOLON
    (3) statement -> . expression_unary SEMICOLON
    (4) statement -> . while_loop
    (5) statement -> . declare_statement
    (6) statement -> . empty
    (21) var_assign -> . ID ASSIGN expression
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID
    (32) expression_unary -> . post
    (33) expression_unary -> . pre
    (10) while_loop -> . WHILE condition block
    (11) while_loop -> . WHILE condition statement
    (19) declare_statement -> . TYPE ID SEMICOLON
    (20) declare_statement -> . TYPE var_assign SEMICOLON
    (41) empty -> .
    (34) post -> . ID PLUS_PLUS
    (35) post -> . ID MINUS_MINUS
    (36) pre -> . PLUS_PLUS ID
    (37) pre -> . MINUS_MINUS ID

  ! shift/reduce conflict for R_FLOWERBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
    R_FLOWERBRACE   shift and go to state 66
    ID              shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    WHILE           shift and go to state 13
    TYPE            shift and go to state 14
    PLUS_PLUS       shift and go to state 15
    MINUS_MINUS     shift and go to state 16

  ! R_FLOWERBRACE   [ reduce using rule 41 (empty -> .) ]
  ! ID              [ reduce using rule 41 (empty -> .) ]
  ! INT             [ reduce using rule 41 (empty -> .) ]
  ! FLOAT           [ reduce using rule 41 (empty -> .) ]
  ! WHILE           [ reduce using rule 41 (empty -> .) ]
  ! TYPE            [ reduce using rule 41 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 41 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 41 (empty -> .) ]

    statement                      shift and go to state 67
    var_assign                     shift and go to state 2
    expression                     shift and go to state 3
    expression_unary               shift and go to state 4
    while_loop                     shift and go to state 5
    declare_statement              shift and go to state 6
    empty                          shift and go to state 7
    post                           shift and go to state 11
    pre                            shift and go to state 12

state 58

    (7) statement_multiple -> statement .

    R_FLOWERBRACE   reduce using rule 7 (statement_multiple -> statement .)
    ID              reduce using rule 7 (statement_multiple -> statement .)
    INT             reduce using rule 7 (statement_multiple -> statement .)
    FLOAT           reduce using rule 7 (statement_multiple -> statement .)
    WHILE           reduce using rule 7 (statement_multiple -> statement .)
    TYPE            reduce using rule 7 (statement_multiple -> statement .)
    PLUS_PLUS       reduce using rule 7 (statement_multiple -> statement .)
    MINUS_MINUS     reduce using rule 7 (statement_multiple -> statement .)


state 59

    (12) condition -> L_PAREN expression relop . expression R_PAREN
    (22) expression -> . expression MULTIPLY expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . expression PLUS expression
    (25) expression -> . expression MINUS expression
    (26) expression -> . expression L_SHIFT expression
    (27) expression -> . expression R_SHIFT expression
    (28) expression -> . expression MOD expression
    (29) expression -> . expression XOR expression
    (30) expression -> . expression AND expression
    (31) expression -> . expression OR expression
    (38) expression -> . INT
    (39) expression -> . FLOAT
    (40) expression -> . ID

    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    ID              shift and go to state 40

    expression                     shift and go to state 68

state 60

    (13) relop -> LE .

    INT             reduce using rule 13 (relop -> LE .)
    FLOAT           reduce using rule 13 (relop -> LE .)
    ID              reduce using rule 13 (relop -> LE .)


state 61

    (14) relop -> LT .

    INT             reduce using rule 14 (relop -> LT .)
    FLOAT           reduce using rule 14 (relop -> LT .)
    ID              reduce using rule 14 (relop -> LT .)


state 62

    (15) relop -> GE .

    INT             reduce using rule 15 (relop -> GE .)
    FLOAT           reduce using rule 15 (relop -> GE .)
    ID              reduce using rule 15 (relop -> GE .)


state 63

    (16) relop -> GT .

    INT             reduce using rule 16 (relop -> GT .)
    FLOAT           reduce using rule 16 (relop -> GT .)
    ID              reduce using rule 16 (relop -> GT .)


state 64

    (17) relop -> NE .

    INT             reduce using rule 17 (relop -> NE .)
    FLOAT           reduce using rule 17 (relop -> NE .)
    ID              reduce using rule 17 (relop -> NE .)


state 65

    (18) relop -> EQ .

    INT             reduce using rule 18 (relop -> EQ .)
    FLOAT           reduce using rule 18 (relop -> EQ .)
    ID              reduce using rule 18 (relop -> EQ .)


state 66

    (9) block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .

    $end            reduce using rule 9 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    R_FLOWERBRACE   reduce using rule 9 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    ID              reduce using rule 9 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    INT             reduce using rule 9 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    FLOAT           reduce using rule 9 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    WHILE           reduce using rule 9 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    TYPE            reduce using rule 9 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    PLUS_PLUS       reduce using rule 9 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    MINUS_MINUS     reduce using rule 9 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)


state 67

    (8) statement_multiple -> statement_multiple statement .

    R_FLOWERBRACE   reduce using rule 8 (statement_multiple -> statement_multiple statement .)
    ID              reduce using rule 8 (statement_multiple -> statement_multiple statement .)
    INT             reduce using rule 8 (statement_multiple -> statement_multiple statement .)
    FLOAT           reduce using rule 8 (statement_multiple -> statement_multiple statement .)
    WHILE           reduce using rule 8 (statement_multiple -> statement_multiple statement .)
    TYPE            reduce using rule 8 (statement_multiple -> statement_multiple statement .)
    PLUS_PLUS       reduce using rule 8 (statement_multiple -> statement_multiple statement .)
    MINUS_MINUS     reduce using rule 8 (statement_multiple -> statement_multiple statement .)


state 68

    (12) condition -> L_PAREN expression relop expression . R_PAREN
    (22) expression -> expression . MULTIPLY expression
    (23) expression -> expression . DIVIDE expression
    (24) expression -> expression . PLUS expression
    (25) expression -> expression . MINUS expression
    (26) expression -> expression . L_SHIFT expression
    (27) expression -> expression . R_SHIFT expression
    (28) expression -> expression . MOD expression
    (29) expression -> expression . XOR expression
    (30) expression -> expression . AND expression
    (31) expression -> expression . OR expression

    R_PAREN         shift and go to state 69
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    L_SHIFT         shift and go to state 23
    R_SHIFT         shift and go to state 24
    MOD             shift and go to state 25
    XOR             shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28


state 69

    (12) condition -> L_PAREN expression relop expression R_PAREN .

    L_FLOWERBRACE   reduce using rule 12 (condition -> L_PAREN expression relop expression R_PAREN .)
    ID              reduce using rule 12 (condition -> L_PAREN expression relop expression R_PAREN .)
    INT             reduce using rule 12 (condition -> L_PAREN expression relop expression R_PAREN .)
    FLOAT           reduce using rule 12 (condition -> L_PAREN expression relop expression R_PAREN .)
    WHILE           reduce using rule 12 (condition -> L_PAREN expression relop expression R_PAREN .)
    TYPE            reduce using rule 12 (condition -> L_PAREN expression relop expression R_PAREN .)
    PLUS_PLUS       reduce using rule 12 (condition -> L_PAREN expression relop expression R_PAREN .)
    MINUS_MINUS     reduce using rule 12 (condition -> L_PAREN expression relop expression R_PAREN .)
    $end            reduce using rule 12 (condition -> L_PAREN expression relop expression R_PAREN .)
    R_FLOWERBRACE   reduce using rule 12 (condition -> L_PAREN expression relop expression R_PAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 33 resolved as shift
WARNING: shift/reduce conflict for INT in state 33 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 33 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 33 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 33 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 33 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 33 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 44 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 44 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 44 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 44 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 44 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 44 resolved as shift
WARNING: shift/reduce conflict for MOD in state 44 resolved as shift
WARNING: shift/reduce conflict for XOR in state 44 resolved as shift
WARNING: shift/reduce conflict for AND in state 44 resolved as shift
WARNING: shift/reduce conflict for OR in state 44 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 45 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 45 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 45 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 45 resolved as shift
WARNING: shift/reduce conflict for MOD in state 45 resolved as shift
WARNING: shift/reduce conflict for XOR in state 45 resolved as shift
WARNING: shift/reduce conflict for AND in state 45 resolved as shift
WARNING: shift/reduce conflict for OR in state 45 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 46 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 46 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 46 resolved as shift
WARNING: shift/reduce conflict for MOD in state 46 resolved as shift
WARNING: shift/reduce conflict for XOR in state 46 resolved as shift
WARNING: shift/reduce conflict for AND in state 46 resolved as shift
WARNING: shift/reduce conflict for OR in state 46 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 47 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 47 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 47 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 47 resolved as shift
WARNING: shift/reduce conflict for MOD in state 47 resolved as shift
WARNING: shift/reduce conflict for XOR in state 47 resolved as shift
WARNING: shift/reduce conflict for AND in state 47 resolved as shift
WARNING: shift/reduce conflict for OR in state 47 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 48 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 48 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 48 resolved as shift
WARNING: shift/reduce conflict for MOD in state 48 resolved as shift
WARNING: shift/reduce conflict for XOR in state 48 resolved as shift
WARNING: shift/reduce conflict for AND in state 48 resolved as shift
WARNING: shift/reduce conflict for OR in state 48 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 49 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 49 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 49 resolved as shift
WARNING: shift/reduce conflict for MOD in state 49 resolved as shift
WARNING: shift/reduce conflict for XOR in state 49 resolved as shift
WARNING: shift/reduce conflict for AND in state 49 resolved as shift
WARNING: shift/reduce conflict for OR in state 49 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for INT in state 53 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 53 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 53 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for R_FLOWERBRACE in state 57 resolved as shift
WARNING: shift/reduce conflict for ID in state 57 resolved as shift
WARNING: shift/reduce conflict for INT in state 57 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 57 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 57 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 57 resolved as shift
