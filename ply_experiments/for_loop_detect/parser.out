Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    EQ
    FOR
    GE
    GT
    ID
    LE
    LT
    L_FLOWERBRACE
    L_PAREN
    NE
    R_FLOWERBRACE
    R_PAREN
    SEMICOLON
    TYPE

Grammar

Rule 0     S' -> detector
Rule 1     detector -> expression
Rule 2     detector -> empty
Rule 3     empty -> <empty>
Rule 4     expression -> expression MULTIPLY expression
Rule 5     expression -> expression DIVIDE expression
Rule 6     expression -> expression PLUS expression
Rule 7     expression -> expression MINUS expression
Rule 8     expression -> INT

Terminals, with rules where they appear

ASSIGN               : 
DIVIDE               : 5
EQ                   : 
FOR                  : 
GE                   : 
GT                   : 
ID                   : 
INT                  : 8
LE                   : 
LT                   : 
L_FLOWERBRACE        : 
L_PAREN              : 
MINUS                : 7
MULTIPLY             : 4
NE                   : 
PLUS                 : 6
R_FLOWERBRACE        : 
R_PAREN              : 
SEMICOLON            : 
TYPE                 : 
error                : 

Nonterminals, with rules where they appear

detector             : 0
empty                : 2
expression           : 1 4 4 5 5 6 6 7 7

Parsing method: LALR

state 0

    (0) S' -> . detector
    (1) detector -> . expression
    (2) detector -> . empty
    (4) expression -> . expression MULTIPLY expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . INT
    (3) empty -> .

    INT             shift and go to state 4
    $end            reduce using rule 3 (empty -> .)

    detector                       shift and go to state 1
    expression                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> detector .



state 2

    (1) detector -> expression .
    (4) expression -> expression . MULTIPLY expression
    (5) expression -> expression . DIVIDE expression
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression

    $end            reduce using rule 1 (detector -> expression .)
    MULTIPLY        shift and go to state 5
    DIVIDE          shift and go to state 6
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8


state 3

    (2) detector -> empty .

    $end            reduce using rule 2 (detector -> empty .)


state 4

    (8) expression -> INT .

    MULTIPLY        reduce using rule 8 (expression -> INT .)
    DIVIDE          reduce using rule 8 (expression -> INT .)
    PLUS            reduce using rule 8 (expression -> INT .)
    MINUS           reduce using rule 8 (expression -> INT .)
    $end            reduce using rule 8 (expression -> INT .)


state 5

    (4) expression -> expression MULTIPLY . expression
    (4) expression -> . expression MULTIPLY expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . INT

    INT             shift and go to state 4

    expression                     shift and go to state 9

state 6

    (5) expression -> expression DIVIDE . expression
    (4) expression -> . expression MULTIPLY expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . INT

    INT             shift and go to state 4

    expression                     shift and go to state 10

state 7

    (6) expression -> expression PLUS . expression
    (4) expression -> . expression MULTIPLY expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . INT

    INT             shift and go to state 4

    expression                     shift and go to state 11

state 8

    (7) expression -> expression MINUS . expression
    (4) expression -> . expression MULTIPLY expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . INT

    INT             shift and go to state 4

    expression                     shift and go to state 12

state 9

    (4) expression -> expression MULTIPLY expression .
    (4) expression -> expression . MULTIPLY expression
    (5) expression -> expression . DIVIDE expression
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 4 (expression -> expression MULTIPLY expression .)
    MULTIPLY        shift and go to state 5
    DIVIDE          shift and go to state 6
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8

  ! MULTIPLY        [ reduce using rule 4 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression MULTIPLY expression .) ]
  ! PLUS            [ reduce using rule 4 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 4 (expression -> expression MULTIPLY expression .) ]


state 10

    (5) expression -> expression DIVIDE expression .
    (4) expression -> expression . MULTIPLY expression
    (5) expression -> expression . DIVIDE expression
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 5 (expression -> expression DIVIDE expression .)
    MULTIPLY        shift and go to state 5
    DIVIDE          shift and go to state 6
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8

  ! MULTIPLY        [ reduce using rule 5 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ reduce using rule 5 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 5 (expression -> expression DIVIDE expression .) ]


state 11

    (6) expression -> expression PLUS expression .
    (4) expression -> expression . MULTIPLY expression
    (5) expression -> expression . DIVIDE expression
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 6 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 5
    DIVIDE          shift and go to state 6
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8

  ! MULTIPLY        [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! PLUS            [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 6 (expression -> expression PLUS expression .) ]


state 12

    (7) expression -> expression MINUS expression .
    (4) expression -> expression . MULTIPLY expression
    (5) expression -> expression . DIVIDE expression
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    $end            reduce using rule 7 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 5
    DIVIDE          shift and go to state 6
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8

  ! MULTIPLY        [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! PLUS            [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 7 (expression -> expression MINUS expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULTIPLY in state 9 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 9 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 9 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 9 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 10 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 10 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 10 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 10 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 11 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 11 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 11 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 11 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 12 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 12 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 12 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 12 resolved as shift
