Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE

Grammar

Rule 0     S' -> detector
Rule 1     detector -> while_loop
Rule 2     detector -> for_loop
Rule 3     statement -> var_assign SEMICOLON
Rule 4     statement -> expression SEMICOLON
Rule 5     statement -> expression_unary SEMICOLON
Rule 6     statement -> while_loop
Rule 7     statement -> for_loop
Rule 8     statement -> declaration SEMICOLON
Rule 9     statement -> SEMICOLON
Rule 10    statement_multiple -> statement_multiple statement
Rule 11    statement_multiple -> statement
Rule 12    block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE
Rule 13    while_loop -> WHILE condition block
Rule 14    while_loop -> WHILE condition statement
Rule 15    for_loop -> FOR for_condition block
Rule 16    for_loop -> FOR for_condition statement
Rule 17    for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN
Rule 18    for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN
Rule 19    for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN
Rule 20    for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN
Rule 21    condition -> L_PAREN expression relop expression R_PAREN
Rule 22    relop -> LE
Rule 23    relop -> LT
Rule 24    relop -> GE
Rule 25    relop -> GT
Rule 26    relop -> NE
Rule 27    relop -> EQ
Rule 28    declaration -> TYPE ID
Rule 29    declaration -> TYPE var_assign
Rule 30    var_assign -> ID ASSIGN expression
Rule 31    expression -> expression MULTIPLY expression
Rule 32    expression -> expression DIVIDE expression
Rule 33    expression -> expression PLUS expression
Rule 34    expression -> expression MINUS expression
Rule 35    expression -> expression L_SHIFT expression
Rule 36    expression -> expression R_SHIFT expression
Rule 37    expression -> expression MOD expression
Rule 38    expression -> expression XOR expression
Rule 39    expression -> expression AND expression
Rule 40    expression -> expression OR expression
Rule 41    expression_unary -> post
Rule 42    expression_unary -> pre
Rule 43    post -> ID PLUS_PLUS
Rule 44    post -> ID MINUS_MINUS
Rule 45    pre -> PLUS_PLUS ID
Rule 46    pre -> MINUS_MINUS ID
Rule 47    expression -> INT
Rule 48    expression -> FLOAT
Rule 49    expression -> ID
Rule 50    empty -> <empty>

Terminals, with rules where they appear

AND                  : 39
ASSIGN               : 30
DIVIDE               : 32
EQ                   : 27
FLOAT                : 48
FOR                  : 15 16
GE                   : 24
GT                   : 25
ID                   : 28 30 43 44 45 46 49
INT                  : 47
LE                   : 22
LT                   : 23
L_FLOWERBRACE        : 12
L_PAREN              : 17 18 19 20 21
L_SHIFT              : 35
MINUS                : 34
MINUS_MINUS          : 44 46
MOD                  : 37
MULTIPLY             : 31
NE                   : 26
NEWLINE              : 
OR                   : 40
PLUS                 : 33
PLUS_PLUS            : 43 45
R_FLOWERBRACE        : 12
R_PAREN              : 17 18 19 20 21
R_SHIFT              : 36
SEMICOLON            : 3 4 5 8 9 17 17 18 18 19 19 20 20
TYPE                 : 28 29
WHILE                : 13 14
XOR                  : 38
error                : 

Nonterminals, with rules where they appear

block                : 13 15
condition            : 13 14
declaration          : 8 19 20
detector             : 0
empty                : 
expression           : 4 17 17 18 18 19 19 20 20 21 21 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40
expression_unary     : 5 18 20
for_condition        : 15 16
for_loop             : 2 7
post                 : 41
pre                  : 42
relop                : 17 18 19 20 21
statement            : 10 11 14 16
statement_multiple   : 10 12
var_assign           : 3 17 17 18 19 29
while_loop           : 1 6

Parsing method: LALR

state 0

    (0) S' -> . detector
    (1) detector -> . while_loop
    (2) detector -> . for_loop
    (13) while_loop -> . WHILE condition block
    (14) while_loop -> . WHILE condition statement
    (15) for_loop -> . FOR for_condition block
    (16) for_loop -> . FOR for_condition statement

    WHILE           shift and go to state 4
    FOR             shift and go to state 5

    detector                       shift and go to state 1
    while_loop                     shift and go to state 2
    for_loop                       shift and go to state 3

state 1

    (0) S' -> detector .



state 2

    (1) detector -> while_loop .

    $end            reduce using rule 1 (detector -> while_loop .)


state 3

    (2) detector -> for_loop .

    $end            reduce using rule 2 (detector -> for_loop .)


state 4

    (13) while_loop -> WHILE . condition block
    (14) while_loop -> WHILE . condition statement
    (21) condition -> . L_PAREN expression relop expression R_PAREN

    L_PAREN         shift and go to state 7

    condition                      shift and go to state 6

state 5

    (15) for_loop -> FOR . for_condition block
    (16) for_loop -> FOR . for_condition statement
    (17) for_condition -> . L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN
    (18) for_condition -> . L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN
    (19) for_condition -> . L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN
    (20) for_condition -> . L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN

    L_PAREN         shift and go to state 9

    for_condition                  shift and go to state 8

state 6

    (13) while_loop -> WHILE condition . block
    (14) while_loop -> WHILE condition . statement
    (12) block -> . L_FLOWERBRACE statement_multiple R_FLOWERBRACE
    (3) statement -> . var_assign SEMICOLON
    (4) statement -> . expression SEMICOLON
    (5) statement -> . expression_unary SEMICOLON
    (6) statement -> . while_loop
    (7) statement -> . for_loop
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . SEMICOLON
    (30) var_assign -> . ID ASSIGN expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID
    (41) expression_unary -> . post
    (42) expression_unary -> . pre
    (13) while_loop -> . WHILE condition block
    (14) while_loop -> . WHILE condition statement
    (15) for_loop -> . FOR for_condition block
    (16) for_loop -> . FOR for_condition statement
    (28) declaration -> . TYPE ID
    (29) declaration -> . TYPE var_assign
    (43) post -> . ID PLUS_PLUS
    (44) post -> . ID MINUS_MINUS
    (45) pre -> . PLUS_PLUS ID
    (46) pre -> . MINUS_MINUS ID

    L_FLOWERBRACE   shift and go to state 12
    SEMICOLON       shift and go to state 14
    ID              shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    WHILE           shift and go to state 4
    FOR             shift and go to state 5
    TYPE            shift and go to state 25
    PLUS_PLUS       shift and go to state 26
    MINUS_MINUS     shift and go to state 27

    block                          shift and go to state 10
    statement                      shift and go to state 11
    var_assign                     shift and go to state 13
    expression                     shift and go to state 15
    expression_unary               shift and go to state 16
    while_loop                     shift and go to state 17
    for_loop                       shift and go to state 18
    declaration                    shift and go to state 19
    post                           shift and go to state 23
    pre                            shift and go to state 24

state 7

    (21) condition -> L_PAREN . expression relop expression R_PAREN
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 28

state 8

    (15) for_loop -> FOR for_condition . block
    (16) for_loop -> FOR for_condition . statement
    (12) block -> . L_FLOWERBRACE statement_multiple R_FLOWERBRACE
    (3) statement -> . var_assign SEMICOLON
    (4) statement -> . expression SEMICOLON
    (5) statement -> . expression_unary SEMICOLON
    (6) statement -> . while_loop
    (7) statement -> . for_loop
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . SEMICOLON
    (30) var_assign -> . ID ASSIGN expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID
    (41) expression_unary -> . post
    (42) expression_unary -> . pre
    (13) while_loop -> . WHILE condition block
    (14) while_loop -> . WHILE condition statement
    (15) for_loop -> . FOR for_condition block
    (16) for_loop -> . FOR for_condition statement
    (28) declaration -> . TYPE ID
    (29) declaration -> . TYPE var_assign
    (43) post -> . ID PLUS_PLUS
    (44) post -> . ID MINUS_MINUS
    (45) pre -> . PLUS_PLUS ID
    (46) pre -> . MINUS_MINUS ID

    L_FLOWERBRACE   shift and go to state 12
    SEMICOLON       shift and go to state 14
    ID              shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    WHILE           shift and go to state 4
    FOR             shift and go to state 5
    TYPE            shift and go to state 25
    PLUS_PLUS       shift and go to state 26
    MINUS_MINUS     shift and go to state 27

    block                          shift and go to state 30
    statement                      shift and go to state 31
    var_assign                     shift and go to state 13
    expression                     shift and go to state 15
    expression_unary               shift and go to state 16
    while_loop                     shift and go to state 17
    for_loop                       shift and go to state 18
    declaration                    shift and go to state 19
    post                           shift and go to state 23
    pre                            shift and go to state 24

state 9

    (17) for_condition -> L_PAREN . var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN
    (18) for_condition -> L_PAREN . var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN
    (19) for_condition -> L_PAREN . declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN
    (20) for_condition -> L_PAREN . declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN
    (30) var_assign -> . ID ASSIGN expression
    (28) declaration -> . TYPE ID
    (29) declaration -> . TYPE var_assign

    ID              shift and go to state 34
    TYPE            shift and go to state 25

    var_assign                     shift and go to state 32
    declaration                    shift and go to state 33

state 10

    (13) while_loop -> WHILE condition block .

    $end            reduce using rule 13 (while_loop -> WHILE condition block .)
    R_FLOWERBRACE   reduce using rule 13 (while_loop -> WHILE condition block .)
    SEMICOLON       reduce using rule 13 (while_loop -> WHILE condition block .)
    ID              reduce using rule 13 (while_loop -> WHILE condition block .)
    INT             reduce using rule 13 (while_loop -> WHILE condition block .)
    FLOAT           reduce using rule 13 (while_loop -> WHILE condition block .)
    WHILE           reduce using rule 13 (while_loop -> WHILE condition block .)
    FOR             reduce using rule 13 (while_loop -> WHILE condition block .)
    TYPE            reduce using rule 13 (while_loop -> WHILE condition block .)
    PLUS_PLUS       reduce using rule 13 (while_loop -> WHILE condition block .)
    MINUS_MINUS     reduce using rule 13 (while_loop -> WHILE condition block .)


state 11

    (14) while_loop -> WHILE condition statement .

    $end            reduce using rule 14 (while_loop -> WHILE condition statement .)
    R_FLOWERBRACE   reduce using rule 14 (while_loop -> WHILE condition statement .)
    SEMICOLON       reduce using rule 14 (while_loop -> WHILE condition statement .)
    ID              reduce using rule 14 (while_loop -> WHILE condition statement .)
    INT             reduce using rule 14 (while_loop -> WHILE condition statement .)
    FLOAT           reduce using rule 14 (while_loop -> WHILE condition statement .)
    WHILE           reduce using rule 14 (while_loop -> WHILE condition statement .)
    FOR             reduce using rule 14 (while_loop -> WHILE condition statement .)
    TYPE            reduce using rule 14 (while_loop -> WHILE condition statement .)
    PLUS_PLUS       reduce using rule 14 (while_loop -> WHILE condition statement .)
    MINUS_MINUS     reduce using rule 14 (while_loop -> WHILE condition statement .)


state 12

    (12) block -> L_FLOWERBRACE . statement_multiple R_FLOWERBRACE
    (10) statement_multiple -> . statement_multiple statement
    (11) statement_multiple -> . statement
    (3) statement -> . var_assign SEMICOLON
    (4) statement -> . expression SEMICOLON
    (5) statement -> . expression_unary SEMICOLON
    (6) statement -> . while_loop
    (7) statement -> . for_loop
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . SEMICOLON
    (30) var_assign -> . ID ASSIGN expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID
    (41) expression_unary -> . post
    (42) expression_unary -> . pre
    (13) while_loop -> . WHILE condition block
    (14) while_loop -> . WHILE condition statement
    (15) for_loop -> . FOR for_condition block
    (16) for_loop -> . FOR for_condition statement
    (28) declaration -> . TYPE ID
    (29) declaration -> . TYPE var_assign
    (43) post -> . ID PLUS_PLUS
    (44) post -> . ID MINUS_MINUS
    (45) pre -> . PLUS_PLUS ID
    (46) pre -> . MINUS_MINUS ID

    SEMICOLON       shift and go to state 14
    ID              shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    WHILE           shift and go to state 4
    FOR             shift and go to state 5
    TYPE            shift and go to state 25
    PLUS_PLUS       shift and go to state 26
    MINUS_MINUS     shift and go to state 27

    statement_multiple             shift and go to state 35
    statement                      shift and go to state 36
    var_assign                     shift and go to state 13
    expression                     shift and go to state 15
    expression_unary               shift and go to state 16
    while_loop                     shift and go to state 17
    for_loop                       shift and go to state 18
    declaration                    shift and go to state 19
    post                           shift and go to state 23
    pre                            shift and go to state 24

state 13

    (3) statement -> var_assign . SEMICOLON

    SEMICOLON       shift and go to state 37


state 14

    (9) statement -> SEMICOLON .

    $end            reduce using rule 9 (statement -> SEMICOLON .)
    R_FLOWERBRACE   reduce using rule 9 (statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 9 (statement -> SEMICOLON .)
    ID              reduce using rule 9 (statement -> SEMICOLON .)
    INT             reduce using rule 9 (statement -> SEMICOLON .)
    FLOAT           reduce using rule 9 (statement -> SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> SEMICOLON .)
    FOR             reduce using rule 9 (statement -> SEMICOLON .)
    TYPE            reduce using rule 9 (statement -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 9 (statement -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 9 (statement -> SEMICOLON .)


state 15

    (4) statement -> expression . SEMICOLON
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 16

    (5) statement -> expression_unary . SEMICOLON

    SEMICOLON       shift and go to state 49


state 17

    (6) statement -> while_loop .

    $end            reduce using rule 6 (statement -> while_loop .)
    R_FLOWERBRACE   reduce using rule 6 (statement -> while_loop .)
    SEMICOLON       reduce using rule 6 (statement -> while_loop .)
    ID              reduce using rule 6 (statement -> while_loop .)
    INT             reduce using rule 6 (statement -> while_loop .)
    FLOAT           reduce using rule 6 (statement -> while_loop .)
    WHILE           reduce using rule 6 (statement -> while_loop .)
    FOR             reduce using rule 6 (statement -> while_loop .)
    TYPE            reduce using rule 6 (statement -> while_loop .)
    PLUS_PLUS       reduce using rule 6 (statement -> while_loop .)
    MINUS_MINUS     reduce using rule 6 (statement -> while_loop .)


state 18

    (7) statement -> for_loop .

    $end            reduce using rule 7 (statement -> for_loop .)
    R_FLOWERBRACE   reduce using rule 7 (statement -> for_loop .)
    SEMICOLON       reduce using rule 7 (statement -> for_loop .)
    ID              reduce using rule 7 (statement -> for_loop .)
    INT             reduce using rule 7 (statement -> for_loop .)
    FLOAT           reduce using rule 7 (statement -> for_loop .)
    WHILE           reduce using rule 7 (statement -> for_loop .)
    FOR             reduce using rule 7 (statement -> for_loop .)
    TYPE            reduce using rule 7 (statement -> for_loop .)
    PLUS_PLUS       reduce using rule 7 (statement -> for_loop .)
    MINUS_MINUS     reduce using rule 7 (statement -> for_loop .)


state 19

    (8) statement -> declaration . SEMICOLON

    SEMICOLON       shift and go to state 50


state 20

    (30) var_assign -> ID . ASSIGN expression
    (49) expression -> ID .
    (43) post -> ID . PLUS_PLUS
    (44) post -> ID . MINUS_MINUS

    ASSIGN          shift and go to state 51
    SEMICOLON       reduce using rule 49 (expression -> ID .)
    MULTIPLY        reduce using rule 49 (expression -> ID .)
    DIVIDE          reduce using rule 49 (expression -> ID .)
    PLUS            reduce using rule 49 (expression -> ID .)
    MINUS           reduce using rule 49 (expression -> ID .)
    L_SHIFT         reduce using rule 49 (expression -> ID .)
    R_SHIFT         reduce using rule 49 (expression -> ID .)
    MOD             reduce using rule 49 (expression -> ID .)
    XOR             reduce using rule 49 (expression -> ID .)
    AND             reduce using rule 49 (expression -> ID .)
    OR              reduce using rule 49 (expression -> ID .)
    PLUS_PLUS       shift and go to state 52
    MINUS_MINUS     shift and go to state 53


state 21

    (47) expression -> INT .

    SEMICOLON       reduce using rule 47 (expression -> INT .)
    MULTIPLY        reduce using rule 47 (expression -> INT .)
    DIVIDE          reduce using rule 47 (expression -> INT .)
    PLUS            reduce using rule 47 (expression -> INT .)
    MINUS           reduce using rule 47 (expression -> INT .)
    L_SHIFT         reduce using rule 47 (expression -> INT .)
    R_SHIFT         reduce using rule 47 (expression -> INT .)
    MOD             reduce using rule 47 (expression -> INT .)
    XOR             reduce using rule 47 (expression -> INT .)
    AND             reduce using rule 47 (expression -> INT .)
    OR              reduce using rule 47 (expression -> INT .)
    LE              reduce using rule 47 (expression -> INT .)
    LT              reduce using rule 47 (expression -> INT .)
    GE              reduce using rule 47 (expression -> INT .)
    GT              reduce using rule 47 (expression -> INT .)
    NE              reduce using rule 47 (expression -> INT .)
    EQ              reduce using rule 47 (expression -> INT .)
    R_PAREN         reduce using rule 47 (expression -> INT .)


state 22

    (48) expression -> FLOAT .

    SEMICOLON       reduce using rule 48 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 48 (expression -> FLOAT .)
    DIVIDE          reduce using rule 48 (expression -> FLOAT .)
    PLUS            reduce using rule 48 (expression -> FLOAT .)
    MINUS           reduce using rule 48 (expression -> FLOAT .)
    L_SHIFT         reduce using rule 48 (expression -> FLOAT .)
    R_SHIFT         reduce using rule 48 (expression -> FLOAT .)
    MOD             reduce using rule 48 (expression -> FLOAT .)
    XOR             reduce using rule 48 (expression -> FLOAT .)
    AND             reduce using rule 48 (expression -> FLOAT .)
    OR              reduce using rule 48 (expression -> FLOAT .)
    LE              reduce using rule 48 (expression -> FLOAT .)
    LT              reduce using rule 48 (expression -> FLOAT .)
    GE              reduce using rule 48 (expression -> FLOAT .)
    GT              reduce using rule 48 (expression -> FLOAT .)
    NE              reduce using rule 48 (expression -> FLOAT .)
    EQ              reduce using rule 48 (expression -> FLOAT .)
    R_PAREN         reduce using rule 48 (expression -> FLOAT .)


state 23

    (41) expression_unary -> post .

    SEMICOLON       reduce using rule 41 (expression_unary -> post .)
    R_PAREN         reduce using rule 41 (expression_unary -> post .)


state 24

    (42) expression_unary -> pre .

    SEMICOLON       reduce using rule 42 (expression_unary -> pre .)
    R_PAREN         reduce using rule 42 (expression_unary -> pre .)


state 25

    (28) declaration -> TYPE . ID
    (29) declaration -> TYPE . var_assign
    (30) var_assign -> . ID ASSIGN expression

    ID              shift and go to state 54

    var_assign                     shift and go to state 55

state 26

    (45) pre -> PLUS_PLUS . ID

    ID              shift and go to state 56


state 27

    (46) pre -> MINUS_MINUS . ID

    ID              shift and go to state 57


state 28

    (21) condition -> L_PAREN expression . relop expression R_PAREN
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (22) relop -> . LE
    (23) relop -> . LT
    (24) relop -> . GE
    (25) relop -> . GT
    (26) relop -> . NE
    (27) relop -> . EQ

    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    LE              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    GT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64

    relop                          shift and go to state 58

state 29

    (49) expression -> ID .

    MULTIPLY        reduce using rule 49 (expression -> ID .)
    DIVIDE          reduce using rule 49 (expression -> ID .)
    PLUS            reduce using rule 49 (expression -> ID .)
    MINUS           reduce using rule 49 (expression -> ID .)
    L_SHIFT         reduce using rule 49 (expression -> ID .)
    R_SHIFT         reduce using rule 49 (expression -> ID .)
    MOD             reduce using rule 49 (expression -> ID .)
    XOR             reduce using rule 49 (expression -> ID .)
    AND             reduce using rule 49 (expression -> ID .)
    OR              reduce using rule 49 (expression -> ID .)
    LE              reduce using rule 49 (expression -> ID .)
    LT              reduce using rule 49 (expression -> ID .)
    GE              reduce using rule 49 (expression -> ID .)
    GT              reduce using rule 49 (expression -> ID .)
    NE              reduce using rule 49 (expression -> ID .)
    EQ              reduce using rule 49 (expression -> ID .)
    SEMICOLON       reduce using rule 49 (expression -> ID .)
    R_PAREN         reduce using rule 49 (expression -> ID .)


state 30

    (15) for_loop -> FOR for_condition block .

    $end            reduce using rule 15 (for_loop -> FOR for_condition block .)
    R_FLOWERBRACE   reduce using rule 15 (for_loop -> FOR for_condition block .)
    SEMICOLON       reduce using rule 15 (for_loop -> FOR for_condition block .)
    ID              reduce using rule 15 (for_loop -> FOR for_condition block .)
    INT             reduce using rule 15 (for_loop -> FOR for_condition block .)
    FLOAT           reduce using rule 15 (for_loop -> FOR for_condition block .)
    WHILE           reduce using rule 15 (for_loop -> FOR for_condition block .)
    FOR             reduce using rule 15 (for_loop -> FOR for_condition block .)
    TYPE            reduce using rule 15 (for_loop -> FOR for_condition block .)
    PLUS_PLUS       reduce using rule 15 (for_loop -> FOR for_condition block .)
    MINUS_MINUS     reduce using rule 15 (for_loop -> FOR for_condition block .)


state 31

    (16) for_loop -> FOR for_condition statement .

    $end            reduce using rule 16 (for_loop -> FOR for_condition statement .)
    R_FLOWERBRACE   reduce using rule 16 (for_loop -> FOR for_condition statement .)
    SEMICOLON       reduce using rule 16 (for_loop -> FOR for_condition statement .)
    ID              reduce using rule 16 (for_loop -> FOR for_condition statement .)
    INT             reduce using rule 16 (for_loop -> FOR for_condition statement .)
    FLOAT           reduce using rule 16 (for_loop -> FOR for_condition statement .)
    WHILE           reduce using rule 16 (for_loop -> FOR for_condition statement .)
    FOR             reduce using rule 16 (for_loop -> FOR for_condition statement .)
    TYPE            reduce using rule 16 (for_loop -> FOR for_condition statement .)
    PLUS_PLUS       reduce using rule 16 (for_loop -> FOR for_condition statement .)
    MINUS_MINUS     reduce using rule 16 (for_loop -> FOR for_condition statement .)


state 32

    (17) for_condition -> L_PAREN var_assign . SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN
    (18) for_condition -> L_PAREN var_assign . SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN

    SEMICOLON       shift and go to state 65


state 33

    (19) for_condition -> L_PAREN declaration . SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN
    (20) for_condition -> L_PAREN declaration . SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN

    SEMICOLON       shift and go to state 66


state 34

    (30) var_assign -> ID . ASSIGN expression

    ASSIGN          shift and go to state 51


state 35

    (12) block -> L_FLOWERBRACE statement_multiple . R_FLOWERBRACE
    (10) statement_multiple -> statement_multiple . statement
    (3) statement -> . var_assign SEMICOLON
    (4) statement -> . expression SEMICOLON
    (5) statement -> . expression_unary SEMICOLON
    (6) statement -> . while_loop
    (7) statement -> . for_loop
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . SEMICOLON
    (30) var_assign -> . ID ASSIGN expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID
    (41) expression_unary -> . post
    (42) expression_unary -> . pre
    (13) while_loop -> . WHILE condition block
    (14) while_loop -> . WHILE condition statement
    (15) for_loop -> . FOR for_condition block
    (16) for_loop -> . FOR for_condition statement
    (28) declaration -> . TYPE ID
    (29) declaration -> . TYPE var_assign
    (43) post -> . ID PLUS_PLUS
    (44) post -> . ID MINUS_MINUS
    (45) pre -> . PLUS_PLUS ID
    (46) pre -> . MINUS_MINUS ID

    R_FLOWERBRACE   shift and go to state 67
    SEMICOLON       shift and go to state 14
    ID              shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    WHILE           shift and go to state 4
    FOR             shift and go to state 5
    TYPE            shift and go to state 25
    PLUS_PLUS       shift and go to state 26
    MINUS_MINUS     shift and go to state 27

    statement                      shift and go to state 68
    var_assign                     shift and go to state 13
    expression                     shift and go to state 15
    expression_unary               shift and go to state 16
    while_loop                     shift and go to state 17
    for_loop                       shift and go to state 18
    declaration                    shift and go to state 19
    post                           shift and go to state 23
    pre                            shift and go to state 24

state 36

    (11) statement_multiple -> statement .

    R_FLOWERBRACE   reduce using rule 11 (statement_multiple -> statement .)
    SEMICOLON       reduce using rule 11 (statement_multiple -> statement .)
    ID              reduce using rule 11 (statement_multiple -> statement .)
    INT             reduce using rule 11 (statement_multiple -> statement .)
    FLOAT           reduce using rule 11 (statement_multiple -> statement .)
    WHILE           reduce using rule 11 (statement_multiple -> statement .)
    FOR             reduce using rule 11 (statement_multiple -> statement .)
    TYPE            reduce using rule 11 (statement_multiple -> statement .)
    PLUS_PLUS       reduce using rule 11 (statement_multiple -> statement .)
    MINUS_MINUS     reduce using rule 11 (statement_multiple -> statement .)


state 37

    (3) statement -> var_assign SEMICOLON .

    $end            reduce using rule 3 (statement -> var_assign SEMICOLON .)
    R_FLOWERBRACE   reduce using rule 3 (statement -> var_assign SEMICOLON .)
    SEMICOLON       reduce using rule 3 (statement -> var_assign SEMICOLON .)
    ID              reduce using rule 3 (statement -> var_assign SEMICOLON .)
    INT             reduce using rule 3 (statement -> var_assign SEMICOLON .)
    FLOAT           reduce using rule 3 (statement -> var_assign SEMICOLON .)
    WHILE           reduce using rule 3 (statement -> var_assign SEMICOLON .)
    FOR             reduce using rule 3 (statement -> var_assign SEMICOLON .)
    TYPE            reduce using rule 3 (statement -> var_assign SEMICOLON .)
    PLUS_PLUS       reduce using rule 3 (statement -> var_assign SEMICOLON .)
    MINUS_MINUS     reduce using rule 3 (statement -> var_assign SEMICOLON .)


state 38

    (4) statement -> expression SEMICOLON .

    $end            reduce using rule 4 (statement -> expression SEMICOLON .)
    R_FLOWERBRACE   reduce using rule 4 (statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 4 (statement -> expression SEMICOLON .)
    ID              reduce using rule 4 (statement -> expression SEMICOLON .)
    INT             reduce using rule 4 (statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 4 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 4 (statement -> expression SEMICOLON .)
    FOR             reduce using rule 4 (statement -> expression SEMICOLON .)
    TYPE            reduce using rule 4 (statement -> expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 4 (statement -> expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 4 (statement -> expression SEMICOLON .)


state 39

    (31) expression -> expression MULTIPLY . expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 69

state 40

    (32) expression -> expression DIVIDE . expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 70

state 41

    (33) expression -> expression PLUS . expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 71

state 42

    (34) expression -> expression MINUS . expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 72

state 43

    (35) expression -> expression L_SHIFT . expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 73

state 44

    (36) expression -> expression R_SHIFT . expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 74

state 45

    (37) expression -> expression MOD . expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 75

state 46

    (38) expression -> expression XOR . expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 76

state 47

    (39) expression -> expression AND . expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 77

state 48

    (40) expression -> expression OR . expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 78

state 49

    (5) statement -> expression_unary SEMICOLON .

    $end            reduce using rule 5 (statement -> expression_unary SEMICOLON .)
    R_FLOWERBRACE   reduce using rule 5 (statement -> expression_unary SEMICOLON .)
    SEMICOLON       reduce using rule 5 (statement -> expression_unary SEMICOLON .)
    ID              reduce using rule 5 (statement -> expression_unary SEMICOLON .)
    INT             reduce using rule 5 (statement -> expression_unary SEMICOLON .)
    FLOAT           reduce using rule 5 (statement -> expression_unary SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> expression_unary SEMICOLON .)
    FOR             reduce using rule 5 (statement -> expression_unary SEMICOLON .)
    TYPE            reduce using rule 5 (statement -> expression_unary SEMICOLON .)
    PLUS_PLUS       reduce using rule 5 (statement -> expression_unary SEMICOLON .)
    MINUS_MINUS     reduce using rule 5 (statement -> expression_unary SEMICOLON .)


state 50

    (8) statement -> declaration SEMICOLON .

    $end            reduce using rule 8 (statement -> declaration SEMICOLON .)
    R_FLOWERBRACE   reduce using rule 8 (statement -> declaration SEMICOLON .)
    SEMICOLON       reduce using rule 8 (statement -> declaration SEMICOLON .)
    ID              reduce using rule 8 (statement -> declaration SEMICOLON .)
    INT             reduce using rule 8 (statement -> declaration SEMICOLON .)
    FLOAT           reduce using rule 8 (statement -> declaration SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> declaration SEMICOLON .)
    FOR             reduce using rule 8 (statement -> declaration SEMICOLON .)
    TYPE            reduce using rule 8 (statement -> declaration SEMICOLON .)
    PLUS_PLUS       reduce using rule 8 (statement -> declaration SEMICOLON .)
    MINUS_MINUS     reduce using rule 8 (statement -> declaration SEMICOLON .)


state 51

    (30) var_assign -> ID ASSIGN . expression
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 79

state 52

    (43) post -> ID PLUS_PLUS .

    SEMICOLON       reduce using rule 43 (post -> ID PLUS_PLUS .)
    R_PAREN         reduce using rule 43 (post -> ID PLUS_PLUS .)


state 53

    (44) post -> ID MINUS_MINUS .

    SEMICOLON       reduce using rule 44 (post -> ID MINUS_MINUS .)
    R_PAREN         reduce using rule 44 (post -> ID MINUS_MINUS .)


state 54

    (28) declaration -> TYPE ID .
    (30) var_assign -> ID . ASSIGN expression

    SEMICOLON       reduce using rule 28 (declaration -> TYPE ID .)
    ASSIGN          shift and go to state 51


state 55

    (29) declaration -> TYPE var_assign .

    SEMICOLON       reduce using rule 29 (declaration -> TYPE var_assign .)


state 56

    (45) pre -> PLUS_PLUS ID .

    SEMICOLON       reduce using rule 45 (pre -> PLUS_PLUS ID .)
    R_PAREN         reduce using rule 45 (pre -> PLUS_PLUS ID .)


state 57

    (46) pre -> MINUS_MINUS ID .

    SEMICOLON       reduce using rule 46 (pre -> MINUS_MINUS ID .)
    R_PAREN         reduce using rule 46 (pre -> MINUS_MINUS ID .)


state 58

    (21) condition -> L_PAREN expression relop . expression R_PAREN
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 80

state 59

    (22) relop -> LE .

    INT             reduce using rule 22 (relop -> LE .)
    FLOAT           reduce using rule 22 (relop -> LE .)
    ID              reduce using rule 22 (relop -> LE .)


state 60

    (23) relop -> LT .

    INT             reduce using rule 23 (relop -> LT .)
    FLOAT           reduce using rule 23 (relop -> LT .)
    ID              reduce using rule 23 (relop -> LT .)


state 61

    (24) relop -> GE .

    INT             reduce using rule 24 (relop -> GE .)
    FLOAT           reduce using rule 24 (relop -> GE .)
    ID              reduce using rule 24 (relop -> GE .)


state 62

    (25) relop -> GT .

    INT             reduce using rule 25 (relop -> GT .)
    FLOAT           reduce using rule 25 (relop -> GT .)
    ID              reduce using rule 25 (relop -> GT .)


state 63

    (26) relop -> NE .

    INT             reduce using rule 26 (relop -> NE .)
    FLOAT           reduce using rule 26 (relop -> NE .)
    ID              reduce using rule 26 (relop -> NE .)


state 64

    (27) relop -> EQ .

    INT             reduce using rule 27 (relop -> EQ .)
    FLOAT           reduce using rule 27 (relop -> EQ .)
    ID              reduce using rule 27 (relop -> EQ .)


state 65

    (17) for_condition -> L_PAREN var_assign SEMICOLON . expression relop expression SEMICOLON var_assign R_PAREN
    (18) for_condition -> L_PAREN var_assign SEMICOLON . expression relop expression SEMICOLON expression_unary R_PAREN
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 81

state 66

    (19) for_condition -> L_PAREN declaration SEMICOLON . expression relop expression SEMICOLON var_assign R_PAREN
    (20) for_condition -> L_PAREN declaration SEMICOLON . expression relop expression SEMICOLON expression_unary R_PAREN
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 82

state 67

    (12) block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .

    $end            reduce using rule 12 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    R_FLOWERBRACE   reduce using rule 12 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    SEMICOLON       reduce using rule 12 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    ID              reduce using rule 12 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    INT             reduce using rule 12 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    FLOAT           reduce using rule 12 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    WHILE           reduce using rule 12 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    FOR             reduce using rule 12 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    TYPE            reduce using rule 12 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    PLUS_PLUS       reduce using rule 12 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)
    MINUS_MINUS     reduce using rule 12 (block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE .)


state 68

    (10) statement_multiple -> statement_multiple statement .

    R_FLOWERBRACE   reduce using rule 10 (statement_multiple -> statement_multiple statement .)
    SEMICOLON       reduce using rule 10 (statement_multiple -> statement_multiple statement .)
    ID              reduce using rule 10 (statement_multiple -> statement_multiple statement .)
    INT             reduce using rule 10 (statement_multiple -> statement_multiple statement .)
    FLOAT           reduce using rule 10 (statement_multiple -> statement_multiple statement .)
    WHILE           reduce using rule 10 (statement_multiple -> statement_multiple statement .)
    FOR             reduce using rule 10 (statement_multiple -> statement_multiple statement .)
    TYPE            reduce using rule 10 (statement_multiple -> statement_multiple statement .)
    PLUS_PLUS       reduce using rule 10 (statement_multiple -> statement_multiple statement .)
    MINUS_MINUS     reduce using rule 10 (statement_multiple -> statement_multiple statement .)


state 69

    (31) expression -> expression MULTIPLY expression .
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       reduce using rule 31 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 31 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 31 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 31 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 31 (expression -> expression MULTIPLY expression .)
    L_SHIFT         reduce using rule 31 (expression -> expression MULTIPLY expression .)
    R_SHIFT         reduce using rule 31 (expression -> expression MULTIPLY expression .)
    MOD             reduce using rule 31 (expression -> expression MULTIPLY expression .)
    XOR             reduce using rule 31 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 31 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 31 (expression -> expression MULTIPLY expression .)
    LE              reduce using rule 31 (expression -> expression MULTIPLY expression .)
    LT              reduce using rule 31 (expression -> expression MULTIPLY expression .)
    GE              reduce using rule 31 (expression -> expression MULTIPLY expression .)
    GT              reduce using rule 31 (expression -> expression MULTIPLY expression .)
    NE              reduce using rule 31 (expression -> expression MULTIPLY expression .)
    EQ              reduce using rule 31 (expression -> expression MULTIPLY expression .)
    R_PAREN         reduce using rule 31 (expression -> expression MULTIPLY expression .)

  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! L_SHIFT         [ shift and go to state 43 ]
  ! R_SHIFT         [ shift and go to state 44 ]
  ! MOD             [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 70

    (32) expression -> expression DIVIDE expression .
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       reduce using rule 32 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 32 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 32 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 32 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 32 (expression -> expression DIVIDE expression .)
    L_SHIFT         reduce using rule 32 (expression -> expression DIVIDE expression .)
    R_SHIFT         reduce using rule 32 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 32 (expression -> expression DIVIDE expression .)
    XOR             reduce using rule 32 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 32 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 32 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 32 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 32 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 32 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 32 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 32 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 32 (expression -> expression DIVIDE expression .)
    R_PAREN         reduce using rule 32 (expression -> expression DIVIDE expression .)

  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! L_SHIFT         [ shift and go to state 43 ]
  ! R_SHIFT         [ shift and go to state 44 ]
  ! MOD             [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 71

    (33) expression -> expression PLUS expression .
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       reduce using rule 33 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 33 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 33 (expression -> expression PLUS expression .)
    L_SHIFT         reduce using rule 33 (expression -> expression PLUS expression .)
    R_SHIFT         reduce using rule 33 (expression -> expression PLUS expression .)
    MOD             reduce using rule 33 (expression -> expression PLUS expression .)
    XOR             reduce using rule 33 (expression -> expression PLUS expression .)
    AND             reduce using rule 33 (expression -> expression PLUS expression .)
    OR              reduce using rule 33 (expression -> expression PLUS expression .)
    LE              reduce using rule 33 (expression -> expression PLUS expression .)
    LT              reduce using rule 33 (expression -> expression PLUS expression .)
    GE              reduce using rule 33 (expression -> expression PLUS expression .)
    GT              reduce using rule 33 (expression -> expression PLUS expression .)
    NE              reduce using rule 33 (expression -> expression PLUS expression .)
    EQ              reduce using rule 33 (expression -> expression PLUS expression .)
    R_PAREN         reduce using rule 33 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! MULTIPLY        [ reduce using rule 33 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! L_SHIFT         [ shift and go to state 43 ]
  ! R_SHIFT         [ shift and go to state 44 ]
  ! MOD             [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 72

    (34) expression -> expression MINUS expression .
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       reduce using rule 34 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 34 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 34 (expression -> expression MINUS expression .)
    L_SHIFT         reduce using rule 34 (expression -> expression MINUS expression .)
    R_SHIFT         reduce using rule 34 (expression -> expression MINUS expression .)
    MOD             reduce using rule 34 (expression -> expression MINUS expression .)
    XOR             reduce using rule 34 (expression -> expression MINUS expression .)
    AND             reduce using rule 34 (expression -> expression MINUS expression .)
    OR              reduce using rule 34 (expression -> expression MINUS expression .)
    LE              reduce using rule 34 (expression -> expression MINUS expression .)
    LT              reduce using rule 34 (expression -> expression MINUS expression .)
    GE              reduce using rule 34 (expression -> expression MINUS expression .)
    GT              reduce using rule 34 (expression -> expression MINUS expression .)
    NE              reduce using rule 34 (expression -> expression MINUS expression .)
    EQ              reduce using rule 34 (expression -> expression MINUS expression .)
    R_PAREN         reduce using rule 34 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! MULTIPLY        [ reduce using rule 34 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! L_SHIFT         [ shift and go to state 43 ]
  ! R_SHIFT         [ shift and go to state 44 ]
  ! MOD             [ shift and go to state 45 ]
  ! XOR             [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 73

    (35) expression -> expression L_SHIFT expression .
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 35 (expression -> expression L_SHIFT expression .)
    LE              reduce using rule 35 (expression -> expression L_SHIFT expression .)
    LT              reduce using rule 35 (expression -> expression L_SHIFT expression .)
    GE              reduce using rule 35 (expression -> expression L_SHIFT expression .)
    GT              reduce using rule 35 (expression -> expression L_SHIFT expression .)
    NE              reduce using rule 35 (expression -> expression L_SHIFT expression .)
    EQ              reduce using rule 35 (expression -> expression L_SHIFT expression .)
    R_PAREN         reduce using rule 35 (expression -> expression L_SHIFT expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! MULTIPLY        [ reduce using rule 35 (expression -> expression L_SHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression L_SHIFT expression .) ]
  ! PLUS            [ reduce using rule 35 (expression -> expression L_SHIFT expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> expression L_SHIFT expression .) ]
  ! L_SHIFT         [ reduce using rule 35 (expression -> expression L_SHIFT expression .) ]
  ! R_SHIFT         [ reduce using rule 35 (expression -> expression L_SHIFT expression .) ]
  ! MOD             [ reduce using rule 35 (expression -> expression L_SHIFT expression .) ]
  ! XOR             [ reduce using rule 35 (expression -> expression L_SHIFT expression .) ]
  ! AND             [ reduce using rule 35 (expression -> expression L_SHIFT expression .) ]
  ! OR              [ reduce using rule 35 (expression -> expression L_SHIFT expression .) ]


state 74

    (36) expression -> expression R_SHIFT expression .
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 36 (expression -> expression R_SHIFT expression .)
    LE              reduce using rule 36 (expression -> expression R_SHIFT expression .)
    LT              reduce using rule 36 (expression -> expression R_SHIFT expression .)
    GE              reduce using rule 36 (expression -> expression R_SHIFT expression .)
    GT              reduce using rule 36 (expression -> expression R_SHIFT expression .)
    NE              reduce using rule 36 (expression -> expression R_SHIFT expression .)
    EQ              reduce using rule 36 (expression -> expression R_SHIFT expression .)
    R_PAREN         reduce using rule 36 (expression -> expression R_SHIFT expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! MULTIPLY        [ reduce using rule 36 (expression -> expression R_SHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression R_SHIFT expression .) ]
  ! PLUS            [ reduce using rule 36 (expression -> expression R_SHIFT expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> expression R_SHIFT expression .) ]
  ! L_SHIFT         [ reduce using rule 36 (expression -> expression R_SHIFT expression .) ]
  ! R_SHIFT         [ reduce using rule 36 (expression -> expression R_SHIFT expression .) ]
  ! MOD             [ reduce using rule 36 (expression -> expression R_SHIFT expression .) ]
  ! XOR             [ reduce using rule 36 (expression -> expression R_SHIFT expression .) ]
  ! AND             [ reduce using rule 36 (expression -> expression R_SHIFT expression .) ]
  ! OR              [ reduce using rule 36 (expression -> expression R_SHIFT expression .) ]


state 75

    (37) expression -> expression MOD expression .
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 37 (expression -> expression MOD expression .)
    LE              reduce using rule 37 (expression -> expression MOD expression .)
    LT              reduce using rule 37 (expression -> expression MOD expression .)
    GE              reduce using rule 37 (expression -> expression MOD expression .)
    GT              reduce using rule 37 (expression -> expression MOD expression .)
    NE              reduce using rule 37 (expression -> expression MOD expression .)
    EQ              reduce using rule 37 (expression -> expression MOD expression .)
    R_PAREN         reduce using rule 37 (expression -> expression MOD expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! MULTIPLY        [ reduce using rule 37 (expression -> expression MOD expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression MOD expression .) ]
  ! PLUS            [ reduce using rule 37 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression MOD expression .) ]
  ! L_SHIFT         [ reduce using rule 37 (expression -> expression MOD expression .) ]
  ! R_SHIFT         [ reduce using rule 37 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 37 (expression -> expression MOD expression .) ]
  ! XOR             [ reduce using rule 37 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 37 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 37 (expression -> expression MOD expression .) ]


state 76

    (38) expression -> expression XOR expression .
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 38 (expression -> expression XOR expression .)
    LE              reduce using rule 38 (expression -> expression XOR expression .)
    LT              reduce using rule 38 (expression -> expression XOR expression .)
    GE              reduce using rule 38 (expression -> expression XOR expression .)
    GT              reduce using rule 38 (expression -> expression XOR expression .)
    NE              reduce using rule 38 (expression -> expression XOR expression .)
    EQ              reduce using rule 38 (expression -> expression XOR expression .)
    R_PAREN         reduce using rule 38 (expression -> expression XOR expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! MULTIPLY        [ reduce using rule 38 (expression -> expression XOR expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression XOR expression .) ]
  ! PLUS            [ reduce using rule 38 (expression -> expression XOR expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression XOR expression .) ]
  ! L_SHIFT         [ reduce using rule 38 (expression -> expression XOR expression .) ]
  ! R_SHIFT         [ reduce using rule 38 (expression -> expression XOR expression .) ]
  ! MOD             [ reduce using rule 38 (expression -> expression XOR expression .) ]
  ! XOR             [ reduce using rule 38 (expression -> expression XOR expression .) ]
  ! AND             [ reduce using rule 38 (expression -> expression XOR expression .) ]
  ! OR              [ reduce using rule 38 (expression -> expression XOR expression .) ]


state 77

    (39) expression -> expression AND expression .
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 39 (expression -> expression AND expression .)
    LE              reduce using rule 39 (expression -> expression AND expression .)
    LT              reduce using rule 39 (expression -> expression AND expression .)
    GE              reduce using rule 39 (expression -> expression AND expression .)
    GT              reduce using rule 39 (expression -> expression AND expression .)
    NE              reduce using rule 39 (expression -> expression AND expression .)
    EQ              reduce using rule 39 (expression -> expression AND expression .)
    R_PAREN         reduce using rule 39 (expression -> expression AND expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! MULTIPLY        [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! L_SHIFT         [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! R_SHIFT         [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! XOR             [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 39 (expression -> expression AND expression .) ]


state 78

    (40) expression -> expression OR expression .
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 40 (expression -> expression OR expression .)
    LE              reduce using rule 40 (expression -> expression OR expression .)
    LT              reduce using rule 40 (expression -> expression OR expression .)
    GE              reduce using rule 40 (expression -> expression OR expression .)
    GT              reduce using rule 40 (expression -> expression OR expression .)
    NE              reduce using rule 40 (expression -> expression OR expression .)
    EQ              reduce using rule 40 (expression -> expression OR expression .)
    R_PAREN         reduce using rule 40 (expression -> expression OR expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48

  ! MULTIPLY        [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! L_SHIFT         [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! R_SHIFT         [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! XOR             [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 40 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 40 (expression -> expression OR expression .) ]


state 79

    (30) var_assign -> ID ASSIGN expression .
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       reduce using rule 30 (var_assign -> ID ASSIGN expression .)
    R_PAREN         reduce using rule 30 (var_assign -> ID ASSIGN expression .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 80

    (21) condition -> L_PAREN expression relop expression . R_PAREN
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    R_PAREN         shift and go to state 83
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 81

    (17) for_condition -> L_PAREN var_assign SEMICOLON expression . relop expression SEMICOLON var_assign R_PAREN
    (18) for_condition -> L_PAREN var_assign SEMICOLON expression . relop expression SEMICOLON expression_unary R_PAREN
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (22) relop -> . LE
    (23) relop -> . LT
    (24) relop -> . GE
    (25) relop -> . GT
    (26) relop -> . NE
    (27) relop -> . EQ

    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    LE              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    GT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64

    relop                          shift and go to state 84

state 82

    (19) for_condition -> L_PAREN declaration SEMICOLON expression . relop expression SEMICOLON var_assign R_PAREN
    (20) for_condition -> L_PAREN declaration SEMICOLON expression . relop expression SEMICOLON expression_unary R_PAREN
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression
    (22) relop -> . LE
    (23) relop -> . LT
    (24) relop -> . GE
    (25) relop -> . GT
    (26) relop -> . NE
    (27) relop -> . EQ

    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    LE              shift and go to state 59
    LT              shift and go to state 60
    GE              shift and go to state 61
    GT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64

    relop                          shift and go to state 85

state 83

    (21) condition -> L_PAREN expression relop expression R_PAREN .

    L_FLOWERBRACE   reduce using rule 21 (condition -> L_PAREN expression relop expression R_PAREN .)
    SEMICOLON       reduce using rule 21 (condition -> L_PAREN expression relop expression R_PAREN .)
    ID              reduce using rule 21 (condition -> L_PAREN expression relop expression R_PAREN .)
    INT             reduce using rule 21 (condition -> L_PAREN expression relop expression R_PAREN .)
    FLOAT           reduce using rule 21 (condition -> L_PAREN expression relop expression R_PAREN .)
    WHILE           reduce using rule 21 (condition -> L_PAREN expression relop expression R_PAREN .)
    FOR             reduce using rule 21 (condition -> L_PAREN expression relop expression R_PAREN .)
    TYPE            reduce using rule 21 (condition -> L_PAREN expression relop expression R_PAREN .)
    PLUS_PLUS       reduce using rule 21 (condition -> L_PAREN expression relop expression R_PAREN .)
    MINUS_MINUS     reduce using rule 21 (condition -> L_PAREN expression relop expression R_PAREN .)


state 84

    (17) for_condition -> L_PAREN var_assign SEMICOLON expression relop . expression SEMICOLON var_assign R_PAREN
    (18) for_condition -> L_PAREN var_assign SEMICOLON expression relop . expression SEMICOLON expression_unary R_PAREN
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 86

state 85

    (19) for_condition -> L_PAREN declaration SEMICOLON expression relop . expression SEMICOLON var_assign R_PAREN
    (20) for_condition -> L_PAREN declaration SEMICOLON expression relop . expression SEMICOLON expression_unary R_PAREN
    (31) expression -> . expression MULTIPLY expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression L_SHIFT expression
    (36) expression -> . expression R_SHIFT expression
    (37) expression -> . expression MOD expression
    (38) expression -> . expression XOR expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (47) expression -> . INT
    (48) expression -> . FLOAT
    (49) expression -> . ID

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    ID              shift and go to state 29

    expression                     shift and go to state 87

state 86

    (17) for_condition -> L_PAREN var_assign SEMICOLON expression relop expression . SEMICOLON var_assign R_PAREN
    (18) for_condition -> L_PAREN var_assign SEMICOLON expression relop expression . SEMICOLON expression_unary R_PAREN
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       shift and go to state 88
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 87

    (19) for_condition -> L_PAREN declaration SEMICOLON expression relop expression . SEMICOLON var_assign R_PAREN
    (20) for_condition -> L_PAREN declaration SEMICOLON expression relop expression . SEMICOLON expression_unary R_PAREN
    (31) expression -> expression . MULTIPLY expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . L_SHIFT expression
    (36) expression -> expression . R_SHIFT expression
    (37) expression -> expression . MOD expression
    (38) expression -> expression . XOR expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       shift and go to state 89
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    L_SHIFT         shift and go to state 43
    R_SHIFT         shift and go to state 44
    MOD             shift and go to state 45
    XOR             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48


state 88

    (17) for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON . var_assign R_PAREN
    (18) for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON . expression_unary R_PAREN
    (30) var_assign -> . ID ASSIGN expression
    (41) expression_unary -> . post
    (42) expression_unary -> . pre
    (43) post -> . ID PLUS_PLUS
    (44) post -> . ID MINUS_MINUS
    (45) pre -> . PLUS_PLUS ID
    (46) pre -> . MINUS_MINUS ID

    ID              shift and go to state 92
    PLUS_PLUS       shift and go to state 26
    MINUS_MINUS     shift and go to state 27

    var_assign                     shift and go to state 90
    expression_unary               shift and go to state 91
    post                           shift and go to state 23
    pre                            shift and go to state 24

state 89

    (19) for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON . var_assign R_PAREN
    (20) for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON . expression_unary R_PAREN
    (30) var_assign -> . ID ASSIGN expression
    (41) expression_unary -> . post
    (42) expression_unary -> . pre
    (43) post -> . ID PLUS_PLUS
    (44) post -> . ID MINUS_MINUS
    (45) pre -> . PLUS_PLUS ID
    (46) pre -> . MINUS_MINUS ID

    ID              shift and go to state 92
    PLUS_PLUS       shift and go to state 26
    MINUS_MINUS     shift and go to state 27

    var_assign                     shift and go to state 93
    expression_unary               shift and go to state 94
    post                           shift and go to state 23
    pre                            shift and go to state 24

state 90

    (17) for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign . R_PAREN

    R_PAREN         shift and go to state 95


state 91

    (18) for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary . R_PAREN

    R_PAREN         shift and go to state 96


state 92

    (30) var_assign -> ID . ASSIGN expression
    (43) post -> ID . PLUS_PLUS
    (44) post -> ID . MINUS_MINUS

    ASSIGN          shift and go to state 51
    PLUS_PLUS       shift and go to state 52
    MINUS_MINUS     shift and go to state 53


state 93

    (19) for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign . R_PAREN

    R_PAREN         shift and go to state 97


state 94

    (20) for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary . R_PAREN

    R_PAREN         shift and go to state 98


state 95

    (17) for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .

    L_FLOWERBRACE   reduce using rule 17 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    SEMICOLON       reduce using rule 17 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    ID              reduce using rule 17 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    INT             reduce using rule 17 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    FLOAT           reduce using rule 17 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    WHILE           reduce using rule 17 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    FOR             reduce using rule 17 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    TYPE            reduce using rule 17 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    PLUS_PLUS       reduce using rule 17 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    MINUS_MINUS     reduce using rule 17 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)


state 96

    (18) for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .

    L_FLOWERBRACE   reduce using rule 18 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    SEMICOLON       reduce using rule 18 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    ID              reduce using rule 18 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    INT             reduce using rule 18 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    FLOAT           reduce using rule 18 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    WHILE           reduce using rule 18 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    FOR             reduce using rule 18 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    TYPE            reduce using rule 18 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    PLUS_PLUS       reduce using rule 18 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    MINUS_MINUS     reduce using rule 18 (for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)


state 97

    (19) for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .

    L_FLOWERBRACE   reduce using rule 19 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    SEMICOLON       reduce using rule 19 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    ID              reduce using rule 19 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    INT             reduce using rule 19 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    FLOAT           reduce using rule 19 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    WHILE           reduce using rule 19 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    FOR             reduce using rule 19 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    TYPE            reduce using rule 19 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    PLUS_PLUS       reduce using rule 19 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)
    MINUS_MINUS     reduce using rule 19 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN .)


state 98

    (20) for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .

    L_FLOWERBRACE   reduce using rule 20 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    SEMICOLON       reduce using rule 20 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    ID              reduce using rule 20 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    INT             reduce using rule 20 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    FLOAT           reduce using rule 20 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    WHILE           reduce using rule 20 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    FOR             reduce using rule 20 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    TYPE            reduce using rule 20 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    PLUS_PLUS       reduce using rule 20 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)
    MINUS_MINUS     reduce using rule 20 (for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULTIPLY in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 73 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 73 resolved as shift
WARNING: shift/reduce conflict for MOD in state 73 resolved as shift
WARNING: shift/reduce conflict for XOR in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 73 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 74 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 74 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 74 resolved as shift
WARNING: shift/reduce conflict for MOD in state 74 resolved as shift
WARNING: shift/reduce conflict for XOR in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 75 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 75 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 75 resolved as shift
WARNING: shift/reduce conflict for MOD in state 75 resolved as shift
WARNING: shift/reduce conflict for XOR in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: shift/reduce conflict for OR in state 75 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 76 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 76 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 76 resolved as shift
WARNING: shift/reduce conflict for MOD in state 76 resolved as shift
WARNING: shift/reduce conflict for XOR in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 76 resolved as shift
WARNING: shift/reduce conflict for OR in state 76 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 77 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 77 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 77 resolved as shift
WARNING: shift/reduce conflict for MOD in state 77 resolved as shift
WARNING: shift/reduce conflict for XOR in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for OR in state 77 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 78 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 78 resolved as shift
WARNING: shift/reduce conflict for MOD in state 78 resolved as shift
WARNING: shift/reduce conflict for XOR in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
