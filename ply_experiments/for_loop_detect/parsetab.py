
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEAND ASSIGN DIVIDE EQ FLOAT FOR GE GT ID INT LE LT L_FLOWERBRACE L_PAREN L_SHIFT MINUS MINUS_MINUS MOD MULTIPLY NE NEWLINE OR PLUS PLUS_PLUS R_FLOWERBRACE R_PAREN R_SHIFT SEMICOLON TYPE WHILE XOR\n    detector : while_loop\n             | for_loop\n    \n    statement : var_assign SEMICOLON\n              | expression SEMICOLON\n              | expression_unary SEMICOLON\n              | while_loop\n              | for_loop\n              | declaration SEMICOLON\n              | SEMICOLON\n    \n    statement_multiple : statement_multiple statement\n    \n    statement_multiple : statement\n    \n    block : L_FLOWERBRACE statement_multiple R_FLOWERBRACE\n    \n    while_loop : WHILE condition block\n               | WHILE condition statement\n    \n    for_loop : FOR for_condition block\n             | FOR for_condition statement\n    \n    for_condition : L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN\n                  | L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN\n                  | L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN\n                  | L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN\n    \n    condition : L_PAREN expression relop expression R_PAREN\n    \n    relop : LE\n          | LT\n          | GE\n          | GT\n          | NE\n          | EQ\n    \n    declaration : TYPE ID\n                | TYPE var_assign\n    \n    var_assign : ID ASSIGN expression\n    \n    expression : expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression PLUS expression\n               | expression MINUS expression\n               | expression L_SHIFT expression\n               | expression R_SHIFT expression\n               | expression MOD expression\n               | expression XOR expression\n               | expression AND expression\n               | expression OR expression\n    \n    expression_unary : post\n                     | pre\n    \n    post : ID PLUS_PLUS\n         | ID MINUS_MINUS\n    \n    pre : PLUS_PLUS ID\n        | MINUS_MINUS ID\n    \n    expression : INT\n               | FLOAT\n    \n    expression : ID\n    \n    empty :\n    '
    
_lr_action_items = {'WHILE':([0,6,8,10,11,12,14,17,18,30,31,35,36,37,38,49,50,67,68,83,95,96,97,98,],[4,4,4,-13,-14,4,-9,-6,-7,-15,-16,4,-11,-3,-4,-5,-8,-12,-10,-21,-17,-18,-19,-20,]),'FOR':([0,6,8,10,11,12,14,17,18,30,31,35,36,37,38,49,50,67,68,83,95,96,97,98,],[5,5,5,-13,-14,5,-9,-6,-7,-15,-16,5,-11,-3,-4,-5,-8,-12,-10,-21,-17,-18,-19,-20,]),'$end':([1,2,3,10,11,14,17,18,30,31,37,38,49,50,67,],[0,-1,-2,-13,-14,-9,-6,-7,-15,-16,-3,-4,-5,-8,-12,]),'L_PAREN':([4,5,],[7,9,]),'L_FLOWERBRACE':([6,8,83,95,96,97,98,],[12,12,-21,-17,-18,-19,-20,]),'SEMICOLON':([6,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,29,30,31,32,33,35,36,37,38,49,50,52,53,54,55,56,57,67,68,69,70,71,72,73,74,75,76,77,78,79,83,86,87,95,96,97,98,],[14,14,-13,-14,14,37,-9,38,49,-6,-7,50,-49,-47,-48,-41,-42,-49,-15,-16,65,66,14,-11,-3,-4,-5,-8,-43,-44,-28,-29,-45,-46,-12,-10,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-30,-21,88,89,-17,-18,-19,-20,]),'ID':([6,7,8,9,10,11,12,14,17,18,25,26,27,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,58,59,60,61,62,63,64,65,66,67,68,83,84,85,88,89,95,96,97,98,],[20,29,20,34,-13,-14,20,-9,-6,-7,54,56,57,-15,-16,20,-11,-3,-4,29,29,29,29,29,29,29,29,29,29,-5,-8,29,29,-22,-23,-24,-25,-26,-27,29,29,-12,-10,-21,29,29,92,92,-17,-18,-19,-20,]),'INT':([6,7,8,10,11,12,14,17,18,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,58,59,60,61,62,63,64,65,66,67,68,83,84,85,95,96,97,98,],[21,21,21,-13,-14,21,-9,-6,-7,-15,-16,21,-11,-3,-4,21,21,21,21,21,21,21,21,21,21,-5,-8,21,21,-22,-23,-24,-25,-26,-27,21,21,-12,-10,-21,21,21,-17,-18,-19,-20,]),'FLOAT':([6,7,8,10,11,12,14,17,18,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,58,59,60,61,62,63,64,65,66,67,68,83,84,85,95,96,97,98,],[22,22,22,-13,-14,22,-9,-6,-7,-15,-16,22,-11,-3,-4,22,22,22,22,22,22,22,22,22,22,-5,-8,22,22,-22,-23,-24,-25,-26,-27,22,22,-12,-10,-21,22,22,-17,-18,-19,-20,]),'TYPE':([6,8,9,10,11,12,14,17,18,30,31,35,36,37,38,49,50,67,68,83,95,96,97,98,],[25,25,25,-13,-14,25,-9,-6,-7,-15,-16,25,-11,-3,-4,-5,-8,-12,-10,-21,-17,-18,-19,-20,]),'PLUS_PLUS':([6,8,10,11,12,14,17,18,20,30,31,35,36,37,38,49,50,67,68,83,88,89,92,95,96,97,98,],[26,26,-13,-14,26,-9,-6,-7,52,-15,-16,26,-11,-3,-4,-5,-8,-12,-10,-21,26,26,52,-17,-18,-19,-20,]),'MINUS_MINUS':([6,8,10,11,12,14,17,18,20,30,31,35,36,37,38,49,50,67,68,83,88,89,92,95,96,97,98,],[27,27,-13,-14,27,-9,-6,-7,53,-15,-16,27,-11,-3,-4,-5,-8,-12,-10,-21,27,27,53,-17,-18,-19,-20,]),'R_FLOWERBRACE':([10,11,14,17,18,30,31,35,36,37,38,49,50,67,68,],[-13,-14,-9,-6,-7,-15,-16,67,-11,-3,-4,-5,-8,-12,-10,]),'MULTIPLY':([15,20,21,22,28,29,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,],[39,-49,-47,-48,39,-49,-31,-32,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'DIVIDE':([15,20,21,22,28,29,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,],[40,-49,-47,-48,40,-49,-31,-32,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'PLUS':([15,20,21,22,28,29,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,],[41,-49,-47,-48,41,-49,-31,-32,-33,-34,41,41,41,41,41,41,41,41,41,41,41,41,]),'MINUS':([15,20,21,22,28,29,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,],[42,-49,-47,-48,42,-49,-31,-32,-33,-34,42,42,42,42,42,42,42,42,42,42,42,42,]),'L_SHIFT':([15,20,21,22,28,29,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,],[43,-49,-47,-48,43,-49,-31,-32,-33,-34,43,43,43,43,43,43,43,43,43,43,43,43,]),'R_SHIFT':([15,20,21,22,28,29,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,],[44,-49,-47,-48,44,-49,-31,-32,-33,-34,44,44,44,44,44,44,44,44,44,44,44,44,]),'MOD':([15,20,21,22,28,29,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,],[45,-49,-47,-48,45,-49,-31,-32,-33,-34,45,45,45,45,45,45,45,45,45,45,45,45,]),'XOR':([15,20,21,22,28,29,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,],[46,-49,-47,-48,46,-49,-31,-32,-33,-34,46,46,46,46,46,46,46,46,46,46,46,46,]),'AND':([15,20,21,22,28,29,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,],[47,-49,-47,-48,47,-49,-31,-32,-33,-34,47,47,47,47,47,47,47,47,47,47,47,47,]),'OR':([15,20,21,22,28,29,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,],[48,-49,-47,-48,48,-49,-31,-32,-33,-34,48,48,48,48,48,48,48,48,48,48,48,48,]),'ASSIGN':([20,34,54,92,],[51,51,51,51,]),'LE':([21,22,28,29,69,70,71,72,73,74,75,76,77,78,81,82,],[-47,-48,59,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,59,59,]),'LT':([21,22,28,29,69,70,71,72,73,74,75,76,77,78,81,82,],[-47,-48,60,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,60,60,]),'GE':([21,22,28,29,69,70,71,72,73,74,75,76,77,78,81,82,],[-47,-48,61,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,61,61,]),'GT':([21,22,28,29,69,70,71,72,73,74,75,76,77,78,81,82,],[-47,-48,62,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,62,62,]),'NE':([21,22,28,29,69,70,71,72,73,74,75,76,77,78,81,82,],[-47,-48,63,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,63,63,]),'EQ':([21,22,28,29,69,70,71,72,73,74,75,76,77,78,81,82,],[-47,-48,64,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,64,64,]),'R_PAREN':([21,22,23,24,29,52,53,56,57,69,70,71,72,73,74,75,76,77,78,79,80,90,91,93,94,],[-47,-48,-41,-42,-49,-43,-44,-45,-46,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-30,83,95,96,97,98,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'detector':([0,],[1,]),'while_loop':([0,6,8,12,35,],[2,17,17,17,17,]),'for_loop':([0,6,8,12,35,],[3,18,18,18,18,]),'condition':([4,],[6,]),'for_condition':([5,],[8,]),'block':([6,8,],[10,30,]),'statement':([6,8,12,35,],[11,31,36,68,]),'var_assign':([6,8,9,12,25,35,88,89,],[13,13,32,13,55,13,90,93,]),'expression':([6,7,8,12,35,39,40,41,42,43,44,45,46,47,48,51,58,65,66,84,85,],[15,28,15,15,15,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,]),'expression_unary':([6,8,12,35,88,89,],[16,16,16,16,91,94,]),'declaration':([6,8,9,12,35,],[19,19,33,19,19,]),'post':([6,8,12,35,88,89,],[23,23,23,23,23,23,]),'pre':([6,8,12,35,88,89,],[24,24,24,24,24,24,]),'statement_multiple':([12,],[35,]),'relop':([28,81,82,],[58,84,85,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> detector","S'",1,None,None,None),
  ('detector -> while_loop','detector',1,'p_detector','detector.py',145),
  ('detector -> for_loop','detector',1,'p_detector','detector.py',146),
  ('statement -> var_assign SEMICOLON','statement',2,'p_statement','detector.py',156),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','detector.py',157),
  ('statement -> expression_unary SEMICOLON','statement',2,'p_statement','detector.py',158),
  ('statement -> while_loop','statement',1,'p_statement','detector.py',159),
  ('statement -> for_loop','statement',1,'p_statement','detector.py',160),
  ('statement -> declaration SEMICOLON','statement',2,'p_statement','detector.py',161),
  ('statement -> SEMICOLON','statement',1,'p_statement','detector.py',162),
  ('statement_multiple -> statement_multiple statement','statement_multiple',2,'p_statement_multiple','detector.py',168),
  ('statement_multiple -> statement','statement_multiple',1,'p_statement_single','detector.py',174),
  ('block -> L_FLOWERBRACE statement_multiple R_FLOWERBRACE','block',3,'p_block','detector.py',183),
  ('while_loop -> WHILE condition block','while_loop',3,'p_while_loop','detector.py',191),
  ('while_loop -> WHILE condition statement','while_loop',3,'p_while_loop','detector.py',192),
  ('for_loop -> FOR for_condition block','for_loop',3,'p_for_loop','detector.py',200),
  ('for_loop -> FOR for_condition statement','for_loop',3,'p_for_loop','detector.py',201),
  ('for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN','for_condition',9,'p_for_condition','detector.py',210),
  ('for_condition -> L_PAREN var_assign SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN','for_condition',9,'p_for_condition','detector.py',211),
  ('for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON var_assign R_PAREN','for_condition',9,'p_for_condition','detector.py',212),
  ('for_condition -> L_PAREN declaration SEMICOLON expression relop expression SEMICOLON expression_unary R_PAREN','for_condition',9,'p_for_condition','detector.py',213),
  ('condition -> L_PAREN expression relop expression R_PAREN','condition',5,'p_condition','detector.py',220),
  ('relop -> LE','relop',1,'p_relop','detector.py',228),
  ('relop -> LT','relop',1,'p_relop','detector.py',229),
  ('relop -> GE','relop',1,'p_relop','detector.py',230),
  ('relop -> GT','relop',1,'p_relop','detector.py',231),
  ('relop -> NE','relop',1,'p_relop','detector.py',232),
  ('relop -> EQ','relop',1,'p_relop','detector.py',233),
  ('declaration -> TYPE ID','declaration',2,'p_declaration','detector.py',243),
  ('declaration -> TYPE var_assign','declaration',2,'p_declaration','detector.py',244),
  ('var_assign -> ID ASSIGN expression','var_assign',3,'p_var_assign','detector.py',252),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','detector.py',261),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','detector.py',262),
  ('expression -> expression PLUS expression','expression',3,'p_expression','detector.py',263),
  ('expression -> expression MINUS expression','expression',3,'p_expression','detector.py',264),
  ('expression -> expression L_SHIFT expression','expression',3,'p_expression','detector.py',265),
  ('expression -> expression R_SHIFT expression','expression',3,'p_expression','detector.py',266),
  ('expression -> expression MOD expression','expression',3,'p_expression','detector.py',267),
  ('expression -> expression XOR expression','expression',3,'p_expression','detector.py',268),
  ('expression -> expression AND expression','expression',3,'p_expression','detector.py',269),
  ('expression -> expression OR expression','expression',3,'p_expression','detector.py',270),
  ('expression_unary -> post','expression_unary',1,'p_expression_unary','detector.py',278),
  ('expression_unary -> pre','expression_unary',1,'p_expression_unary','detector.py',279),
  ('post -> ID PLUS_PLUS','post',2,'p_post','detector.py',286),
  ('post -> ID MINUS_MINUS','post',2,'p_post','detector.py',287),
  ('pre -> PLUS_PLUS ID','pre',2,'p_pre','detector.py',294),
  ('pre -> MINUS_MINUS ID','pre',2,'p_pre','detector.py',295),
  ('expression -> INT','expression',1,'p_expression_type','detector.py',303),
  ('expression -> FLOAT','expression',1,'p_expression_type','detector.py',304),
  ('expression -> ID','expression',1,'p_expression_var','detector.py',311),
  ('empty -> <empty>','empty',0,'p_empty','detector.py',319),
]
