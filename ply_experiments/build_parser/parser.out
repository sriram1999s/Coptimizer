Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    DOUBLE
    EQ
    FLOAT
    GE
    GT
    KEY_WORD
    LBRACKET
    LE
    LT
    L_FLOWERBRACE
    L_PAREN
    MINUS_MINUS
    NE
    PERIOD
    PLUS_PLUS
    RBRACKET
    R_FLOWERBRACE
    R_PAREN
    SEMICOLON

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statements statement
Rule 2     statements -> statement
Rule 3     statement -> VAR_NAME EQUALS expr
Rule 4     expr -> expr PLUS expr
Rule 5     expr -> expr MINUS expr
Rule 6     expr -> expr TIMES expr
Rule 7     expr -> expr DIVIDE expr
Rule 8     expr -> expr L_SHIFT expr
Rule 9     expr -> expr R_SHIFT expr
Rule 10    expr -> expr AND expr
Rule 11    expr -> expr OR expr
Rule 12    expr -> expr XOR expr
Rule 13    expr -> expr MOD expr
Rule 14    expr -> INT
Rule 15    expr -> VAR_NAME

Terminals, with rules where they appear

AND                  : 10
COLON                : 
DIVIDE               : 7
DOUBLE               : 
EQ                   : 
EQUALS               : 3
FLOAT                : 
GE                   : 
GT                   : 
INT                  : 14
KEY_WORD             : 
LBRACKET             : 
LE                   : 
LT                   : 
L_FLOWERBRACE        : 
L_PAREN              : 
L_SHIFT              : 8
MINUS                : 5
MINUS_MINUS          : 
MOD                  : 13
NE                   : 
OR                   : 11
PERIOD               : 
PLUS                 : 4
PLUS_PLUS            : 
RBRACKET             : 
R_FLOWERBRACE        : 
R_PAREN              : 
R_SHIFT              : 9
SEMICOLON            : 
TIMES                : 6
VAR_NAME             : 3 15
XOR                  : 12
error                : 

Nonterminals, with rules where they appear

expr                 : 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13
statement            : 1 2
statements           : 1 0

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statements statement
    (2) statements -> . statement
    (3) statement -> . VAR_NAME EQUALS expr

    VAR_NAME        shift and go to state 3

    statements                     shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> statements .
    (1) statements -> statements . statement
    (3) statement -> . VAR_NAME EQUALS expr

    VAR_NAME        shift and go to state 3

    statement                      shift and go to state 4

state 2

    (2) statements -> statement .

    VAR_NAME        reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)


state 3

    (3) statement -> VAR_NAME . EQUALS expr

    EQUALS          shift and go to state 5


state 4

    (1) statements -> statements statement .

    VAR_NAME        reduce using rule 1 (statements -> statements statement .)
    $end            reduce using rule 1 (statements -> statements statement .)


state 5

    (3) statement -> VAR_NAME EQUALS . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr L_SHIFT expr
    (9) expr -> . expr R_SHIFT expr
    (10) expr -> . expr AND expr
    (11) expr -> . expr OR expr
    (12) expr -> . expr XOR expr
    (13) expr -> . expr MOD expr
    (14) expr -> . INT
    (15) expr -> . VAR_NAME

    INT             shift and go to state 8
    VAR_NAME        shift and go to state 6

    expr                           shift and go to state 7

state 6

    (15) expr -> VAR_NAME .

    PLUS            reduce using rule 15 (expr -> VAR_NAME .)
    MINUS           reduce using rule 15 (expr -> VAR_NAME .)
    TIMES           reduce using rule 15 (expr -> VAR_NAME .)
    DIVIDE          reduce using rule 15 (expr -> VAR_NAME .)
    L_SHIFT         reduce using rule 15 (expr -> VAR_NAME .)
    R_SHIFT         reduce using rule 15 (expr -> VAR_NAME .)
    AND             reduce using rule 15 (expr -> VAR_NAME .)
    OR              reduce using rule 15 (expr -> VAR_NAME .)
    XOR             reduce using rule 15 (expr -> VAR_NAME .)
    MOD             reduce using rule 15 (expr -> VAR_NAME .)
    VAR_NAME        reduce using rule 15 (expr -> VAR_NAME .)
    $end            reduce using rule 15 (expr -> VAR_NAME .)


state 7

    (3) statement -> VAR_NAME EQUALS expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . L_SHIFT expr
    (9) expr -> expr . R_SHIFT expr
    (10) expr -> expr . AND expr
    (11) expr -> expr . OR expr
    (12) expr -> expr . XOR expr
    (13) expr -> expr . MOD expr

    VAR_NAME        reduce using rule 3 (statement -> VAR_NAME EQUALS expr .)
    $end            reduce using rule 3 (statement -> VAR_NAME EQUALS expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    L_SHIFT         shift and go to state 13
    R_SHIFT         shift and go to state 14
    AND             shift and go to state 15
    OR              shift and go to state 16
    XOR             shift and go to state 17
    MOD             shift and go to state 18


state 8

    (14) expr -> INT .

    PLUS            reduce using rule 14 (expr -> INT .)
    MINUS           reduce using rule 14 (expr -> INT .)
    TIMES           reduce using rule 14 (expr -> INT .)
    DIVIDE          reduce using rule 14 (expr -> INT .)
    L_SHIFT         reduce using rule 14 (expr -> INT .)
    R_SHIFT         reduce using rule 14 (expr -> INT .)
    AND             reduce using rule 14 (expr -> INT .)
    OR              reduce using rule 14 (expr -> INT .)
    XOR             reduce using rule 14 (expr -> INT .)
    MOD             reduce using rule 14 (expr -> INT .)
    VAR_NAME        reduce using rule 14 (expr -> INT .)
    $end            reduce using rule 14 (expr -> INT .)


state 9

    (4) expr -> expr PLUS . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr L_SHIFT expr
    (9) expr -> . expr R_SHIFT expr
    (10) expr -> . expr AND expr
    (11) expr -> . expr OR expr
    (12) expr -> . expr XOR expr
    (13) expr -> . expr MOD expr
    (14) expr -> . INT
    (15) expr -> . VAR_NAME

    INT             shift and go to state 8
    VAR_NAME        shift and go to state 6

    expr                           shift and go to state 19

state 10

    (5) expr -> expr MINUS . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr L_SHIFT expr
    (9) expr -> . expr R_SHIFT expr
    (10) expr -> . expr AND expr
    (11) expr -> . expr OR expr
    (12) expr -> . expr XOR expr
    (13) expr -> . expr MOD expr
    (14) expr -> . INT
    (15) expr -> . VAR_NAME

    INT             shift and go to state 8
    VAR_NAME        shift and go to state 6

    expr                           shift and go to state 20

state 11

    (6) expr -> expr TIMES . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr L_SHIFT expr
    (9) expr -> . expr R_SHIFT expr
    (10) expr -> . expr AND expr
    (11) expr -> . expr OR expr
    (12) expr -> . expr XOR expr
    (13) expr -> . expr MOD expr
    (14) expr -> . INT
    (15) expr -> . VAR_NAME

    INT             shift and go to state 8
    VAR_NAME        shift and go to state 6

    expr                           shift and go to state 21

state 12

    (7) expr -> expr DIVIDE . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr L_SHIFT expr
    (9) expr -> . expr R_SHIFT expr
    (10) expr -> . expr AND expr
    (11) expr -> . expr OR expr
    (12) expr -> . expr XOR expr
    (13) expr -> . expr MOD expr
    (14) expr -> . INT
    (15) expr -> . VAR_NAME

    INT             shift and go to state 8
    VAR_NAME        shift and go to state 6

    expr                           shift and go to state 22

state 13

    (8) expr -> expr L_SHIFT . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr L_SHIFT expr
    (9) expr -> . expr R_SHIFT expr
    (10) expr -> . expr AND expr
    (11) expr -> . expr OR expr
    (12) expr -> . expr XOR expr
    (13) expr -> . expr MOD expr
    (14) expr -> . INT
    (15) expr -> . VAR_NAME

    INT             shift and go to state 8
    VAR_NAME        shift and go to state 6

    expr                           shift and go to state 23

state 14

    (9) expr -> expr R_SHIFT . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr L_SHIFT expr
    (9) expr -> . expr R_SHIFT expr
    (10) expr -> . expr AND expr
    (11) expr -> . expr OR expr
    (12) expr -> . expr XOR expr
    (13) expr -> . expr MOD expr
    (14) expr -> . INT
    (15) expr -> . VAR_NAME

    INT             shift and go to state 8
    VAR_NAME        shift and go to state 6

    expr                           shift and go to state 24

state 15

    (10) expr -> expr AND . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr L_SHIFT expr
    (9) expr -> . expr R_SHIFT expr
    (10) expr -> . expr AND expr
    (11) expr -> . expr OR expr
    (12) expr -> . expr XOR expr
    (13) expr -> . expr MOD expr
    (14) expr -> . INT
    (15) expr -> . VAR_NAME

    INT             shift and go to state 8
    VAR_NAME        shift and go to state 6

    expr                           shift and go to state 25

state 16

    (11) expr -> expr OR . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr L_SHIFT expr
    (9) expr -> . expr R_SHIFT expr
    (10) expr -> . expr AND expr
    (11) expr -> . expr OR expr
    (12) expr -> . expr XOR expr
    (13) expr -> . expr MOD expr
    (14) expr -> . INT
    (15) expr -> . VAR_NAME

    INT             shift and go to state 8
    VAR_NAME        shift and go to state 6

    expr                           shift and go to state 26

state 17

    (12) expr -> expr XOR . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr L_SHIFT expr
    (9) expr -> . expr R_SHIFT expr
    (10) expr -> . expr AND expr
    (11) expr -> . expr OR expr
    (12) expr -> . expr XOR expr
    (13) expr -> . expr MOD expr
    (14) expr -> . INT
    (15) expr -> . VAR_NAME

    INT             shift and go to state 8
    VAR_NAME        shift and go to state 6

    expr                           shift and go to state 27

state 18

    (13) expr -> expr MOD . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr L_SHIFT expr
    (9) expr -> . expr R_SHIFT expr
    (10) expr -> . expr AND expr
    (11) expr -> . expr OR expr
    (12) expr -> . expr XOR expr
    (13) expr -> . expr MOD expr
    (14) expr -> . INT
    (15) expr -> . VAR_NAME

    INT             shift and go to state 8
    VAR_NAME        shift and go to state 6

    expr                           shift and go to state 28

state 19

    (4) expr -> expr PLUS expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . L_SHIFT expr
    (9) expr -> expr . R_SHIFT expr
    (10) expr -> expr . AND expr
    (11) expr -> expr . OR expr
    (12) expr -> expr . XOR expr
    (13) expr -> expr . MOD expr

    PLUS            reduce using rule 4 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 4 (expr -> expr PLUS expr .)
    L_SHIFT         reduce using rule 4 (expr -> expr PLUS expr .)
    R_SHIFT         reduce using rule 4 (expr -> expr PLUS expr .)
    AND             reduce using rule 4 (expr -> expr PLUS expr .)
    OR              reduce using rule 4 (expr -> expr PLUS expr .)
    XOR             reduce using rule 4 (expr -> expr PLUS expr .)
    MOD             reduce using rule 4 (expr -> expr PLUS expr .)
    VAR_NAME        reduce using rule 4 (expr -> expr PLUS expr .)
    $end            reduce using rule 4 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12

  ! TIMES           [ reduce using rule 4 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 4 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! L_SHIFT         [ shift and go to state 13 ]
  ! R_SHIFT         [ shift and go to state 14 ]
  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]
  ! XOR             [ shift and go to state 17 ]
  ! MOD             [ shift and go to state 18 ]


state 20

    (5) expr -> expr MINUS expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . L_SHIFT expr
    (9) expr -> expr . R_SHIFT expr
    (10) expr -> expr . AND expr
    (11) expr -> expr . OR expr
    (12) expr -> expr . XOR expr
    (13) expr -> expr . MOD expr

    PLUS            reduce using rule 5 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 5 (expr -> expr MINUS expr .)
    L_SHIFT         reduce using rule 5 (expr -> expr MINUS expr .)
    R_SHIFT         reduce using rule 5 (expr -> expr MINUS expr .)
    AND             reduce using rule 5 (expr -> expr MINUS expr .)
    OR              reduce using rule 5 (expr -> expr MINUS expr .)
    XOR             reduce using rule 5 (expr -> expr MINUS expr .)
    MOD             reduce using rule 5 (expr -> expr MINUS expr .)
    VAR_NAME        reduce using rule 5 (expr -> expr MINUS expr .)
    $end            reduce using rule 5 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12

  ! TIMES           [ reduce using rule 5 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 5 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! L_SHIFT         [ shift and go to state 13 ]
  ! R_SHIFT         [ shift and go to state 14 ]
  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]
  ! XOR             [ shift and go to state 17 ]
  ! MOD             [ shift and go to state 18 ]


state 21

    (6) expr -> expr TIMES expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . L_SHIFT expr
    (9) expr -> expr . R_SHIFT expr
    (10) expr -> expr . AND expr
    (11) expr -> expr . OR expr
    (12) expr -> expr . XOR expr
    (13) expr -> expr . MOD expr

    PLUS            reduce using rule 6 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 6 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 6 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 6 (expr -> expr TIMES expr .)
    L_SHIFT         reduce using rule 6 (expr -> expr TIMES expr .)
    R_SHIFT         reduce using rule 6 (expr -> expr TIMES expr .)
    AND             reduce using rule 6 (expr -> expr TIMES expr .)
    OR              reduce using rule 6 (expr -> expr TIMES expr .)
    XOR             reduce using rule 6 (expr -> expr TIMES expr .)
    MOD             reduce using rule 6 (expr -> expr TIMES expr .)
    VAR_NAME        reduce using rule 6 (expr -> expr TIMES expr .)
    $end            reduce using rule 6 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! L_SHIFT         [ shift and go to state 13 ]
  ! R_SHIFT         [ shift and go to state 14 ]
  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]
  ! XOR             [ shift and go to state 17 ]
  ! MOD             [ shift and go to state 18 ]


state 22

    (7) expr -> expr DIVIDE expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . L_SHIFT expr
    (9) expr -> expr . R_SHIFT expr
    (10) expr -> expr . AND expr
    (11) expr -> expr . OR expr
    (12) expr -> expr . XOR expr
    (13) expr -> expr . MOD expr

    PLUS            reduce using rule 7 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 7 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 7 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 7 (expr -> expr DIVIDE expr .)
    L_SHIFT         reduce using rule 7 (expr -> expr DIVIDE expr .)
    R_SHIFT         reduce using rule 7 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 7 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 7 (expr -> expr DIVIDE expr .)
    XOR             reduce using rule 7 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 7 (expr -> expr DIVIDE expr .)
    VAR_NAME        reduce using rule 7 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 7 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! L_SHIFT         [ shift and go to state 13 ]
  ! R_SHIFT         [ shift and go to state 14 ]
  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]
  ! XOR             [ shift and go to state 17 ]
  ! MOD             [ shift and go to state 18 ]


state 23

    (8) expr -> expr L_SHIFT expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . L_SHIFT expr
    (9) expr -> expr . R_SHIFT expr
    (10) expr -> expr . AND expr
    (11) expr -> expr . OR expr
    (12) expr -> expr . XOR expr
    (13) expr -> expr . MOD expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    VAR_NAME        reduce using rule 8 (expr -> expr L_SHIFT expr .)
    $end            reduce using rule 8 (expr -> expr L_SHIFT expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    L_SHIFT         shift and go to state 13
    R_SHIFT         shift and go to state 14
    AND             shift and go to state 15
    OR              shift and go to state 16
    XOR             shift and go to state 17
    MOD             shift and go to state 18

  ! PLUS            [ reduce using rule 8 (expr -> expr L_SHIFT expr .) ]
  ! MINUS           [ reduce using rule 8 (expr -> expr L_SHIFT expr .) ]
  ! TIMES           [ reduce using rule 8 (expr -> expr L_SHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 8 (expr -> expr L_SHIFT expr .) ]
  ! L_SHIFT         [ reduce using rule 8 (expr -> expr L_SHIFT expr .) ]
  ! R_SHIFT         [ reduce using rule 8 (expr -> expr L_SHIFT expr .) ]
  ! AND             [ reduce using rule 8 (expr -> expr L_SHIFT expr .) ]
  ! OR              [ reduce using rule 8 (expr -> expr L_SHIFT expr .) ]
  ! XOR             [ reduce using rule 8 (expr -> expr L_SHIFT expr .) ]
  ! MOD             [ reduce using rule 8 (expr -> expr L_SHIFT expr .) ]


state 24

    (9) expr -> expr R_SHIFT expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . L_SHIFT expr
    (9) expr -> expr . R_SHIFT expr
    (10) expr -> expr . AND expr
    (11) expr -> expr . OR expr
    (12) expr -> expr . XOR expr
    (13) expr -> expr . MOD expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    VAR_NAME        reduce using rule 9 (expr -> expr R_SHIFT expr .)
    $end            reduce using rule 9 (expr -> expr R_SHIFT expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    L_SHIFT         shift and go to state 13
    R_SHIFT         shift and go to state 14
    AND             shift and go to state 15
    OR              shift and go to state 16
    XOR             shift and go to state 17
    MOD             shift and go to state 18

  ! PLUS            [ reduce using rule 9 (expr -> expr R_SHIFT expr .) ]
  ! MINUS           [ reduce using rule 9 (expr -> expr R_SHIFT expr .) ]
  ! TIMES           [ reduce using rule 9 (expr -> expr R_SHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 9 (expr -> expr R_SHIFT expr .) ]
  ! L_SHIFT         [ reduce using rule 9 (expr -> expr R_SHIFT expr .) ]
  ! R_SHIFT         [ reduce using rule 9 (expr -> expr R_SHIFT expr .) ]
  ! AND             [ reduce using rule 9 (expr -> expr R_SHIFT expr .) ]
  ! OR              [ reduce using rule 9 (expr -> expr R_SHIFT expr .) ]
  ! XOR             [ reduce using rule 9 (expr -> expr R_SHIFT expr .) ]
  ! MOD             [ reduce using rule 9 (expr -> expr R_SHIFT expr .) ]


state 25

    (10) expr -> expr AND expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . L_SHIFT expr
    (9) expr -> expr . R_SHIFT expr
    (10) expr -> expr . AND expr
    (11) expr -> expr . OR expr
    (12) expr -> expr . XOR expr
    (13) expr -> expr . MOD expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    VAR_NAME        reduce using rule 10 (expr -> expr AND expr .)
    $end            reduce using rule 10 (expr -> expr AND expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    L_SHIFT         shift and go to state 13
    R_SHIFT         shift and go to state 14
    AND             shift and go to state 15
    OR              shift and go to state 16
    XOR             shift and go to state 17
    MOD             shift and go to state 18

  ! PLUS            [ reduce using rule 10 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 10 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 10 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 10 (expr -> expr AND expr .) ]
  ! L_SHIFT         [ reduce using rule 10 (expr -> expr AND expr .) ]
  ! R_SHIFT         [ reduce using rule 10 (expr -> expr AND expr .) ]
  ! AND             [ reduce using rule 10 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 10 (expr -> expr AND expr .) ]
  ! XOR             [ reduce using rule 10 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 10 (expr -> expr AND expr .) ]


state 26

    (11) expr -> expr OR expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . L_SHIFT expr
    (9) expr -> expr . R_SHIFT expr
    (10) expr -> expr . AND expr
    (11) expr -> expr . OR expr
    (12) expr -> expr . XOR expr
    (13) expr -> expr . MOD expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    VAR_NAME        reduce using rule 11 (expr -> expr OR expr .)
    $end            reduce using rule 11 (expr -> expr OR expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    L_SHIFT         shift and go to state 13
    R_SHIFT         shift and go to state 14
    AND             shift and go to state 15
    OR              shift and go to state 16
    XOR             shift and go to state 17
    MOD             shift and go to state 18

  ! PLUS            [ reduce using rule 11 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 11 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 11 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 11 (expr -> expr OR expr .) ]
  ! L_SHIFT         [ reduce using rule 11 (expr -> expr OR expr .) ]
  ! R_SHIFT         [ reduce using rule 11 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 11 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 11 (expr -> expr OR expr .) ]
  ! XOR             [ reduce using rule 11 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 11 (expr -> expr OR expr .) ]


state 27

    (12) expr -> expr XOR expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . L_SHIFT expr
    (9) expr -> expr . R_SHIFT expr
    (10) expr -> expr . AND expr
    (11) expr -> expr . OR expr
    (12) expr -> expr . XOR expr
    (13) expr -> expr . MOD expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    VAR_NAME        reduce using rule 12 (expr -> expr XOR expr .)
    $end            reduce using rule 12 (expr -> expr XOR expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    L_SHIFT         shift and go to state 13
    R_SHIFT         shift and go to state 14
    AND             shift and go to state 15
    OR              shift and go to state 16
    XOR             shift and go to state 17
    MOD             shift and go to state 18

  ! PLUS            [ reduce using rule 12 (expr -> expr XOR expr .) ]
  ! MINUS           [ reduce using rule 12 (expr -> expr XOR expr .) ]
  ! TIMES           [ reduce using rule 12 (expr -> expr XOR expr .) ]
  ! DIVIDE          [ reduce using rule 12 (expr -> expr XOR expr .) ]
  ! L_SHIFT         [ reduce using rule 12 (expr -> expr XOR expr .) ]
  ! R_SHIFT         [ reduce using rule 12 (expr -> expr XOR expr .) ]
  ! AND             [ reduce using rule 12 (expr -> expr XOR expr .) ]
  ! OR              [ reduce using rule 12 (expr -> expr XOR expr .) ]
  ! XOR             [ reduce using rule 12 (expr -> expr XOR expr .) ]
  ! MOD             [ reduce using rule 12 (expr -> expr XOR expr .) ]


state 28

    (13) expr -> expr MOD expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . L_SHIFT expr
    (9) expr -> expr . R_SHIFT expr
    (10) expr -> expr . AND expr
    (11) expr -> expr . OR expr
    (12) expr -> expr . XOR expr
    (13) expr -> expr . MOD expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for L_SHIFT resolved as shift
  ! shift/reduce conflict for R_SHIFT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    VAR_NAME        reduce using rule 13 (expr -> expr MOD expr .)
    $end            reduce using rule 13 (expr -> expr MOD expr .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    L_SHIFT         shift and go to state 13
    R_SHIFT         shift and go to state 14
    AND             shift and go to state 15
    OR              shift and go to state 16
    XOR             shift and go to state 17
    MOD             shift and go to state 18

  ! PLUS            [ reduce using rule 13 (expr -> expr MOD expr .) ]
  ! MINUS           [ reduce using rule 13 (expr -> expr MOD expr .) ]
  ! TIMES           [ reduce using rule 13 (expr -> expr MOD expr .) ]
  ! DIVIDE          [ reduce using rule 13 (expr -> expr MOD expr .) ]
  ! L_SHIFT         [ reduce using rule 13 (expr -> expr MOD expr .) ]
  ! R_SHIFT         [ reduce using rule 13 (expr -> expr MOD expr .) ]
  ! AND             [ reduce using rule 13 (expr -> expr MOD expr .) ]
  ! OR              [ reduce using rule 13 (expr -> expr MOD expr .) ]
  ! XOR             [ reduce using rule 13 (expr -> expr MOD expr .) ]
  ! MOD             [ reduce using rule 13 (expr -> expr MOD expr .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 23 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 23 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 23 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 23 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 23 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 23 resolved as shift
WARNING: shift/reduce conflict for AND in state 23 resolved as shift
WARNING: shift/reduce conflict for OR in state 23 resolved as shift
WARNING: shift/reduce conflict for XOR in state 23 resolved as shift
WARNING: shift/reduce conflict for MOD in state 23 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 24 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 24 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 24 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 24 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 24 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 24 resolved as shift
WARNING: shift/reduce conflict for AND in state 24 resolved as shift
WARNING: shift/reduce conflict for OR in state 24 resolved as shift
WARNING: shift/reduce conflict for XOR in state 24 resolved as shift
WARNING: shift/reduce conflict for MOD in state 24 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 25 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 25 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 25 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 25 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 25 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 25 resolved as shift
WARNING: shift/reduce conflict for AND in state 25 resolved as shift
WARNING: shift/reduce conflict for OR in state 25 resolved as shift
WARNING: shift/reduce conflict for XOR in state 25 resolved as shift
WARNING: shift/reduce conflict for MOD in state 25 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 26 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 26 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 26 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 26 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 26 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 26 resolved as shift
WARNING: shift/reduce conflict for AND in state 26 resolved as shift
WARNING: shift/reduce conflict for OR in state 26 resolved as shift
WARNING: shift/reduce conflict for XOR in state 26 resolved as shift
WARNING: shift/reduce conflict for MOD in state 26 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 27 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 27 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 27 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 27 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 27 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 27 resolved as shift
WARNING: shift/reduce conflict for AND in state 27 resolved as shift
WARNING: shift/reduce conflict for OR in state 27 resolved as shift
WARNING: shift/reduce conflict for XOR in state 27 resolved as shift
WARNING: shift/reduce conflict for MOD in state 27 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 28 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 28 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 28 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 28 resolved as shift
WARNING: shift/reduce conflict for L_SHIFT in state 28 resolved as shift
WARNING: shift/reduce conflict for R_SHIFT in state 28 resolved as shift
WARNING: shift/reduce conflict for AND in state 28 resolved as shift
WARNING: shift/reduce conflict for OR in state 28 resolved as shift
WARNING: shift/reduce conflict for XOR in state 28 resolved as shift
WARNING: shift/reduce conflict for MOD in state 28 resolved as shift
