
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAND COLON DIVIDE DOUBLE EQ EQUALS FLOAT GE GT INT KEY_WORD LBRACKET LE LT L_FLOWERBRACE L_PAREN L_SHIFT MINUS MINUS_MINUS MOD NE OR PERIOD PLUS PLUS_PLUS RBRACKET R_FLOWERBRACE R_PAREN R_SHIFT SEMICOLON TIMES VAR_NAME XOR\n    statements : statements statement\n    \n    statements : statement\n    \n    statement : VAR_NAME EQUALS expr\n    \n    expr : expr PLUS expr\n         | expr MINUS expr\n         | expr TIMES expr\n    \t | expr DIVIDE expr\n     \t | expr L_SHIFT expr\n         | expr R_SHIFT expr\n         | expr AND expr\n         | expr OR expr\n         | expr XOR expr\n         | expr MOD expr\n    \n    expr : INT\n    \n    expr : VAR_NAME\n    '
    
_lr_action_items = {'VAR_NAME':([0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,],[3,3,-2,-1,6,-15,-3,-14,6,6,6,6,6,6,6,6,6,6,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'$end':([1,2,4,6,7,8,19,20,21,22,23,24,25,26,27,28,],[0,-2,-1,-15,-3,-14,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'EQUALS':([3,],[5,]),'INT':([5,9,10,11,12,13,14,15,16,17,18,],[8,8,8,8,8,8,8,8,8,8,8,]),'PLUS':([6,7,8,19,20,21,22,23,24,25,26,27,28,],[-15,9,-14,-4,-5,-6,-7,9,9,9,9,9,9,]),'MINUS':([6,7,8,19,20,21,22,23,24,25,26,27,28,],[-15,10,-14,-4,-5,-6,-7,10,10,10,10,10,10,]),'TIMES':([6,7,8,19,20,21,22,23,24,25,26,27,28,],[-15,11,-14,11,11,-6,-7,11,11,11,11,11,11,]),'DIVIDE':([6,7,8,19,20,21,22,23,24,25,26,27,28,],[-15,12,-14,12,12,-6,-7,12,12,12,12,12,12,]),'L_SHIFT':([6,7,8,19,20,21,22,23,24,25,26,27,28,],[-15,13,-14,-4,-5,-6,-7,13,13,13,13,13,13,]),'R_SHIFT':([6,7,8,19,20,21,22,23,24,25,26,27,28,],[-15,14,-14,-4,-5,-6,-7,14,14,14,14,14,14,]),'AND':([6,7,8,19,20,21,22,23,24,25,26,27,28,],[-15,15,-14,-4,-5,-6,-7,15,15,15,15,15,15,]),'OR':([6,7,8,19,20,21,22,23,24,25,26,27,28,],[-15,16,-14,-4,-5,-6,-7,16,16,16,16,16,16,]),'XOR':([6,7,8,19,20,21,22,23,24,25,26,27,28,],[-15,17,-14,-4,-5,-6,-7,17,17,17,17,17,17,]),'MOD':([6,7,8,19,20,21,22,23,24,25,26,27,28,],[-15,18,-14,-4,-5,-6,-7,18,18,18,18,18,18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,],[1,]),'statement':([0,1,],[2,4,]),'expr':([5,9,10,11,12,13,14,15,16,17,18,],[7,19,20,21,22,23,24,25,26,27,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statements statement','statements',2,'p_multiple_statements','lexer_parser.py',108),
  ('statements -> statement','statements',1,'p_single_statements','lexer_parser.py',114),
  ('statement -> VAR_NAME EQUALS expr','statement',3,'p_assignment_statement','lexer_parser.py',120),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binop','lexer_parser.py',126),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binop','lexer_parser.py',127),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binop','lexer_parser.py',128),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binop','lexer_parser.py',129),
  ('expr -> expr L_SHIFT expr','expr',3,'p_expr_binop','lexer_parser.py',130),
  ('expr -> expr R_SHIFT expr','expr',3,'p_expr_binop','lexer_parser.py',131),
  ('expr -> expr AND expr','expr',3,'p_expr_binop','lexer_parser.py',132),
  ('expr -> expr OR expr','expr',3,'p_expr_binop','lexer_parser.py',133),
  ('expr -> expr XOR expr','expr',3,'p_expr_binop','lexer_parser.py',134),
  ('expr -> expr MOD expr','expr',3,'p_expr_binop','lexer_parser.py',135),
  ('expr -> INT','expr',1,'p_expr_int','lexer_parser.py',141),
  ('expr -> VAR_NAME','expr',1,'p_expr_name','lexer_parser.py',147),
]
